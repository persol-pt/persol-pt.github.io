<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>N.yamamoto on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/categories/n.yamamoto/</link>
    <description>Recent content in N.yamamoto on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 21 Dec 2017 17:43:55 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/categories/n.yamamoto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HealthKitアプリを作る（その１）</title>
      <link>https://persol-pt.github.io/posts/healthkit-app-part1/</link>
      <pubDate>Thu, 21 Dec 2017 17:43:55 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/healthkit-app-part1/</guid>
      <description>Apple Watch Series3を買いました。
Series1からの買い替えです。
CellularじゃなくてGPSの方です。
Apple Watch Series3を使った感想は「去年買っておけばよかった」です。
Nike+ Run Clubで走るの楽しい。
とりあえず２週間続いてます。
目標は「フルマラソン走ってた時の体重に戻して、来シーズンフルマラソン走る」ことにしました。
「アクティビティ」と「Nike+ Run Club」のアプリでも記録は見られるのですが、
ジョギングを習慣化するために、走ったログを簡単に参照できるアプリを作ってみます。
ついでに体重の変化も見たいですね。（体重が減る前提）
「HealthKitアプリを作る」不定期連載その１ 
iOS11 / Swift4を使います。
今回は、自分のiPhoneに登録してある体重、ワークアウトの記録をXcodeのコンソールで見るところまでです。
1.おもむろにXcodeを開いてシングルページアプリケーションのプロジェクトを作る
2.プロジェクトでHealthKitが使えるようにする
TARGETS→Capabiliteis→HealthKitをONにする
TARGETS→General→Linked Frameworks and Librariesに「HealthKit.framework」と「HealthKitUI.framework」を設定
Info.plistを開いて&amp;rdquo;Add Row&amp;rdquo;して 「Privacy - Health Update Usage Description」を追加
続けて&amp;rdquo;Add Row&amp;rdquo;して「Privacy - Health Share Usage Description」を追加
3.このアプリからiOS内のデータにアクセスする許可をもらう画面を出す
ViewController.swiftの viewDidLoadあたりをこんなかんじで
 let myHealthStore = HKHealthStore() override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib.</description>
    </item>
    
    <item>
      <title>久しぶりのiOSアプリ</title>
      <link>https://persol-pt.github.io/posts/back_to_swift/</link>
      <pubDate>Mon, 11 Dec 2017 15:43:02 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/back_to_swift/</guid>
      <description> 出戻り Swift 
先日、昔（個人事業主をしてた時に）作ったiOSアプリがストアから消えてるんですけど
というような連絡を受けました。
何年も前に作りぱなしにしてたので、iOS11リリース頃に消されています。
最近iOSアプリ開発をしていなかったので、この機会にSwiftでアプリを作ってみます。
とりあえず、遊びで作った15パズルをSwiftで作り直します。
昔の素材を引っ張り出すのが面倒なので、１からつくります。
1.素材の準備 
1〜15の数字が書かれた正方形の画像をサイズ違いで３枚毎。（270x270 / 180x180 / 90x90）
2.Swiftの書き方を復習 
Swift初心者なので、とりあえずオプショナル型の使い方をググる
どこよりも分かりやすいSwiftの&amp;rdquo;?&amp;ldquo;と&amp;rdquo;!&amp;rdquo;
ここがわかり易かったです。
var / letの違い
メソッドの書き方
このくらいを調べる
3.Xcodeでプロジェクト作成 
Xcodeを開いてアプリ開発開始　XcodeからSingle View Appのプロジェクトで新規作成
ストーリーボードを開いて、360x360のビューを配置
その上に90x90のボタンを左上から15個並べる。(右下が1個分空く)
作った素材（1〜15の画像）をプロジェクトに登録
ボタンに画像を設定
ボタンに画像を指定してもうまく読み込まれない？実機で動かすと画像が表示されない。
Assetsに画像を登録してやるとうまく言ったので、それでよしとする。
ボタンの動きを作成（押された時に空きスペースが上下左右にあれば移動）
移動が終わったら全てのボタンが正しく並んでいるか判断。並んでいれば終了
シャッフルボタンを作成して、並びをぐちゃぐちゃにする動きを追加
タイマーを追加してシャッフルボタンが押されてから並びが正しくなるまで
タイマー表示する機能を追加
終わったらComplete画面を表示。ベストタイムを保持。
だいたいこんな感じで動くものができました。 4.Swiftで作ってとまどったところ 
オプショナル型のところ
Viewアニメーションの書き方
UIColorとか指定方法が変わった箇所
5.アプリの申請 
アプリの申請手順をかなり忘れていて、少し手こずりました。
それはまた別の機会に。 </description>
    </item>
    
  </channel>
</rss>