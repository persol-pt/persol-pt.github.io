<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Boiyaa on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/categories/boiyaa/</link>
    <description>Recent content in Boiyaa on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 18 Dec 2017 00:56:09 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/categories/boiyaa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TerraformでAmazon ECS上にGitLabを構築</title>
      <link>https://persol-pt.github.io/posts/gitlab-ecs/</link>
      <pubDate>Mon, 18 Dec 2017 00:56:09 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/gitlab-ecs/</guid>
      <description>GitLab Advent Calendar 2017 17 日目の記事です。

私のプロジェクトではプロジェクト管理に GitLab を使っていて、元々シングルインスタンスに docker-compose で構築していて、こんな記事も書いたのですが、コンテナクラスターを一度触ってみたかったので、勉強がてら ECS 上に GitLab 構築してみました。

その結果の構成コードがこちらのリポジトリになりますので、同じことをやりたい方の参考になればと思います。

最初に結論 GitLab だけしか立てないなら ECS 上に構築するのはイマイチ旨味がありません。
もし HA を求めるなら、公式がHigh Availability on AWS - GitLab Documentationというページを用意していますので、これに従った方がいいと思います。

主に負荷の増減が大きいのは GitLab Runner の方なんですが、仕様上 ECS で管理できなかったので、スケーリングする機会がなく、また思ってた以上に ECS 構築が超絶面倒臭くて、Fat Terraform になってしまい、ただただ手間のかかった docker-compose みたいなものになっています。

先日 ECS インスタンスをフルマネージドしてくれる新サービスAWS Fargateが発表されましたので、インスタンス周りの設定を大幅に削れそうなら ECS でもいいかもしれません。

あと、Gitlab Meetup Tokyo #2 でこちらのAnsible で作る、AWS で「器の大きい」Omnibus-GitLab // Speaker Deckという LT を拝聴して、「俺も 8,390,000TB にしたい！」という衝動にかられ、バージニアの EFS に構築したせいか普通に立てた時よりあきらかにもっさりしています。。</description>
    </item>
    
    <item>
      <title>DockerだけでRails、特にWebpackerはハマった</title>
      <link>https://persol-pt.github.io/posts/webpacker-docker/</link>
      <pubDate>Sat, 16 Dec 2017 16:50:12 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/webpacker-docker/</guid>
      <description>すいません遅くなりました。。
Ruby on Rails Advent Calendar 2017 14 日目の記事です。

ある日、

「docker run で rails new とか bundle install したい」 
と、知り合いのそこそこ可愛い女の子が言ってきました。

同僚の作ったおじさん LINE ボットの教師データになるほどのオジサンである私は、
誠意（下心）を持って取り組んだのであります。
しかし、やってみたら色々ハマったので共有します。

ちなみに最終的な状態はこちらのリポジトリにありますので、ここからの長々とした過程を飛ばしたい方はこちらをご覧ください。

Rails の Docker イメージを作る 一般的に Rails アプリケーションと Docker を組み合わせる場合、Quickstart: Compose and Railsにあるように、「Rails アプリケーションを起動する Docker イメージを作る」という使い方が主流のようです。

docker runで rails コマンドを使用したいのであれば、Rails とその依存するものがインストールされた Docker イメージが必要ですが、
Rails 公式 Docker イメージは非推奨でもうメンテされていないので、
最初はこの Dockerfile を参考にして作りました。

FROM ruby RUN apt-get update &amp;amp;&amp;amp; apt-get install -y nodejs --no-install-recommends &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* RUN apt-get update &amp;amp;&amp;amp; apt-get install -y mysql-client postgresql-client sqlite3 --no-install-recommends &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* RUN gem install rails  しかしこれで作ったイメージでbundle install --path vendor/bundleしても.</description>
    </item>
    
    <item>
      <title>react-sketchappを使った開発ワークフロー</title>
      <link>https://persol-pt.github.io/posts/react-sketchapp/</link>
      <pubDate>Sun, 10 Dec 2017 23:10:32 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/react-sketchapp/</guid>
      <description>React #1 Advent Calendar 2017 10 日目の記事です。

react-sketchapp react-sketchappとは、デザインツールの Sketch 用にビルドできる React コンポーネントです。
README からの引用ですが、こんな概要です。
 デザインシステムの管理 - react-sketchapp は、Airbnb’s design system用に作られました。大規模なデザインシステムで Sketch のアセットを管理する最も簡単な方法です。 デザインに実際のコンポーネントを使用 - コードで React コンポーネントとして実装し、Sketch に描画します。 実際のデータを使用したデザイン - データを使用したデザインは重要ですが困難です。 react-sketchapp は Sketch ファイルに実際のデータを取得して埋め込むのを簡単にします。 Sketch 上に新しいツールを作る - Sketch をカスタムデザインツールのキャンバスとして使用する最も簡単な方法  実際に使用した画面の雰囲気はPainting with Codeをご覧ください。

react-sketchapp を導入するメリット 一般的にプロダクトの開発ワークフローは、例えばデザイナーからデザインファイルを受け取り、プログラマーがシステムに組み込む、という感じになりますが、そこで react-sketchapp を使ってデザイナー側で React コンポーネントを実装してもらえると、プログラマーは HOC などを利用してロジックを被せるように作っていけば、デザイナーにデザインの修正や改善を直接プロダクトコードに反映してもらえるようになって、手間やミスを削減できます。

デザイナーからすると React コンポーネントを作るというとハードルが高そうに聞こえるかもしれませんが、ステートレスコンポーネントなら HTML に結構似ているので、マークアップできる方であれば学習コストはそれほどない（と思っています）。

はじめてみる はじめるにあたり以下の環境が必要です。
 node.js 4+ ( 筆者は 8.</description>
    </item>
    
    <item>
      <title>Cloud-based WAF(Web Application Firewall) 比較</title>
      <link>https://persol-pt.github.io/posts/waf-comparison/</link>
      <pubDate>Wed, 06 Dec 2017 01:32:59 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/waf-comparison/</guid>
      <description>Security Advent Calendar 2017 6 日目の記事です。

WAF とは XSS や SQL インジェクションなどの HTTP 攻撃を防ぐための Firewall で、
Cloud-based WAF では、リクエストが WAF を通るよう WAF サービスに DNS を向け、安全なリクエストのみオリジンへ通す、という方式をとります。
私は WAF には疎くて、AWS WAF くらいしか知らなかったので、WAF ってのは自分で設定するものなんだろうなぁと思っていたんですが、調べてみたらマネージド WAF サービスって色々あるんですね。

サービス比較するにあたり、海外の WAF 紹介記事調べたり、ガートナーの WAF 市場の図を参考にしました。

 Gartner Magic Quadrant for Web Application Firewalls 2016   
 Gartner Magic Quadrant for Web Application Firewalls 2017   
ということで、市場リーダーの Imperva のIncapsulaと Akamai のクラウド・セキュリティ・ソリューションと F5 Networks のSilverline、そして海外の WAF 紹介記事でよく見かけるCloudflareとSucuri、国産のScutum、AWS を比較してみました。</description>
    </item>
    
    <item>
      <title>静的ファイルWebホスティングならS3よりFirebase Hosting</title>
      <link>https://persol-pt.github.io/posts/firebase-hosting/</link>
      <pubDate>Sun, 03 Dec 2017 03:13:06 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/firebase-hosting/</guid>
      <description>Firebase Advent Calendar 2017 3 日目の記事です。

Firebase Hostingはストレージ、Web ホスティング、CDN 、マネージド SSL を組み込んだサービスです。 AWS ではストレージと Web ホスティングは S3 だけでできますが、CDN は CloudFront、マネージド SSL は Certificate Manager と、複数のサービスを組み合わせ、設定しないといけません。 CDN 性能も、Firebase Hosting で使用されている Google Cloud CDN は CloudFront よりパフォーマンスがいいようです。 比較表 
    Firebase Hosting AWS     構築 1 コマンド S3 を作成。HTTPS や CDN を使うなら CloudFront を作成して S3 と結合   デプロイ 1 コマンド 1 コマンド   SSL 証明書 自動で作成＆更新＆適用 ACM で作成して CloudFront に適用。自動更新   キャッシュ ブラウザキャッシュ設定のみ CDN キャッシュ設定含め柔軟に設定可   アクセス制限 無し WAF を作成して CloudFront に適用   料金（ストア） $0.</description>
    </item>
    
    <item>
      <title>社外発信はじめました</title>
      <link>https://persol-pt.github.io/posts/start-publishing/</link>
      <pubDate>Sun, 12 Nov 2017 16:13:55 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/start-publishing/</guid>
      <description>&lt;p&gt;はじめまして、パーソルプロセス＆テクノロジー株式会社です。みんな PPT と略してます。レガシーなパワポですね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>