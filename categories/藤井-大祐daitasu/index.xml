<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>藤井 大祐daitasu on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/categories/%E8%97%A4%E4%BA%95-%E5%A4%A7%E7%A5%90daitasu/</link>
    <description>Recent content in 藤井 大祐daitasu on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 12 Jan 2018 17:38:09 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/categories/%E8%97%A4%E4%BA%95-%E5%A4%A7%E7%A5%90daitasu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>てくてく勉強会1月10日年初め</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180110/</link>
      <pubDate>Fri, 12 Jan 2018 17:38:09 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180110/</guid>
      <description>あけましておめでとうございます!!
本年もどうぞよろしくお願い致します。

  
今年も毎週の勉強会の様子や会社の取り組みなどをこちらのブログで発信していきます。
お時間がある際にぜひのぞいてみてください。
また、技術的なブログについては今後Qiitaの方に移行することになりました。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー

今週の発表者は川崎さん。
テーマは 「最近のJavascriptフレームワーク選定について」 でした。
2018年1月22日の勉強会　テーマ「最近のJavascriptフレームワーク選定について」 
  
Javascriptフレームワークといえば、その流行の移り変わりが早いことで有名ですが、
今回はそんなフロントエンドのフレームワーク選定で何を選んだらよいのか、
人気のReact、Angular、Vue.jsの3つの比較を紹介くださりました。
  

今回のお話では、技術選定時に意識することとして以下のような点を述べられていました。
 どんなものを作るのか
 出来上がるコードの品質
・可読性
・拡張性
 開発体制
・開発期間
・開発・運用人数
・採用・新メンバーの参入障壁
 公式ドキュメントの充実度
  
結論
 
それぞれのフレームワークで向いているシステムは以下のようにまとめられます。

  
AngularはReactやVue.jsとは異なり、開発に必要な機能をひとしきり揃えているため、
自分でそろえる負担が少ない一方、自由度は下がる印象です。
逆にReactは基本的にViewを作成するためのライブラリなので、
自身でほかのライブラリと組み合わせていく必要がありますが自由度は高めでUI作成は得意です。
またReactはJSXで書かれるというのも特徴ですね。
学習コストとしてはAngularが一番高く、React、VueJSの順に下がっていくようです。
ReactやVueJSは自身でライブラリを追加していかなければなりませんが、
CLIもあるのでそういった負担の差は最近だいぶ減ってきているみたいですね。
いずれにしても、合う合わないはいろんな観点から考える必要がありそうなので、
ある程度触れてみてからの検証が必要そうです。
まだまだフロントエンド界隈は終わりなき戦いが続くのでしょうか?
日々流行にアンテナを張り続けていかなければなりませんね。
それでは、今週はここまで。</description>
    </item>
    
    <item>
      <title>てくてく勉強会12月22日</title>
      <link>https://persol-pt.github.io/posts/tech-workshop1222/</link>
      <pubDate>Fri, 29 Dec 2017 23:58:18 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop1222/</guid>
      <description>皆さんこんにちは、新卒の藤井大祐(daitasu)です。

今週も私たちパーソルプロセスアンドテクノロジーのテクテクチームが
行っている技術勉強会のレポートをしていきたいと思います。
今年の勉強会ブログはこれで最後になります。
今週の発表者は定期的に自身でパッケージを作成し、OSSに貢献しているnissyさん。
テーマは 「http request multiplexer と文字列マッチング」 でした。
12月22日の勉強会　テーマ「http request multiplexer と文字列マッチング」 
  
通常URLにリクエストする際、そのURL文字列にマッチするパターンを
登録されているパターンの中から検索し、呼び出されるハンドラを決めようとします。
このルーティング処理はその言語やフレームワークでの処理方法によって
大きく処理速度が異なります。
今回nissyさんは基数木(パトリシア木)という集合データ構造を用いて
Go言語でルーティング処理を行うパッケージを作成しました。
Bon(https://github.com/nissy/bon)

今回のお話では、
基本的なマッチングパターンのルールから
トライ木(Trie)による複数パターンマッチング や KMP といった
代表的な文字列パターンマッチングのアルゴリズム紹介
に始まり、

いくつかの代表的なアルゴリズムの速度比較を行いまいした。
以下はパトリシア木(Patricia Trie)の構造紹介とその速度表です。

Patricia Trie(https://github.com/nissy/mux/tree/patricia)

  Patricia Trieの構造     Patricia Trie 速度   
そしてその後、実際に自身がPatricia Trieをもとにチューニングし、
Go言語で作成したルーティング手法のパッケージ「 Bon 」についての紹介を行い、
他のGo言語フレームワークとの速度比較を行いました。

  Bon 比較     BonとGo言語フレームワークの速度比較</description>
    </item>
    
    <item>
      <title>てくてく勉強会12月15日</title>
      <link>https://persol-pt.github.io/posts/tech-workshop1215/</link>
      <pubDate>Fri, 22 Dec 2017 02:48:09 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop1215/</guid>
      <description>皆さんこんにちは、新卒の藤井大祐(daitasu)です。
今週も私たちストラテジーサービス部テクノロジーサービスグループテクノロジーサービスチーム(通称テクテク)が
行っている技術勉強会のレポートをしていきたいと思います。

今週のテーマは 「YUBIKEYを用いた二要素認証」 です。
12月15日の勉強会　テーマ「YUBIKEYを用いた二要素認証」 
  
近年、セキュリティがより重視されるようになり、
二要素認証という言葉を聞くことが増えてきました。

一般的には、認証というと
 「ID」 + 「パスワード」
という、IDに対応した1要素での認証が標準です。
しかし、これに＋して、
  ・本人の生体情報 (顔認証、指紋認証、網膜スキャン等)
・本人だけが所有するもの (スマホやPCなどのハードウェアトークン、メールで届くワンタイムパスワード)
などを用いてもう一つ認証を増やすのが2要素認証になります。
今週の発表では、上記の 本人が所有するもの として YUBIKEY という
認証デバイスを用いた二要素認証の説明がありました。
 YUBIKEYの機能一覧   
こちらはPCに直接差して、デバイスの真ん中にあるボタンを押すだけで
二要素認証ができるというシンプルな仕組みになっています。
YUBIKEYには多くの機能が含まれているのですが、
今回は、 Yubico OTP 、 FIDO U2F に焦点を当てたお話でした。
この記事ではFIDOの内容に少しだけ触れていきたいと思います。
FIDO U2F(Fast Identity Online Universal 2nd Factor) 
この機能は自前のサービス、及びGoogle、Facebook、Dropbox、Github、GitLabなどの
各種WEBサービスにおいて、
U2Fデバイスを登録し、チャレンジレスポンス認証を利用可能にします。
チャレンジレスポンス方式の認証というのは、「認証される側」と「認証する側」の間のやり取りを
 「認証をする側」が「認証される側」に チャレンジ（ランダムな数字） を発行
 「認証される側」は チャレンジを秘密の鍵 で署名</description>
    </item>
    
    <item>
      <title>Dialogflow &#43; VoiceTextで音声会話Botをさくっと作ろう</title>
      <link>https://persol-pt.github.io/posts/audio-conversation-bot/</link>
      <pubDate>Thu, 14 Dec 2017 00:19:21 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/audio-conversation-bot/</guid>
      <description>dialogflow + VoiceTextでさくっと音声会話botを作ろう
 どうもこんにちは、藤井です。
今回は新卒ながら自分もAdvent Calenderの記事投稿に加わらせて頂きました。
この記事は、新卒専用 Advent Calendar 2017 19日目の記事になります。
本記事では、dialogflowを用いて簡単にチャットボットを作り、そこにVoiceTextを足し合わせた音声会話Botの作り方をお伝えしたいと思います。

今回作るものの概要 
完成品 
何はともあれ実物を見てみましょう。今回作成した音声会話Botはこちらです。↓↓↓

Dialogflow + VoiceTextで音声チャットボットを作ってみた(youtube)

① この動画のような感じでBotとの音声を文字列に変換しBotが認識
② AIが反応し対応する言葉を返答
③ テキストと同時に、音声にも変換して返事を返す

今回は相手役としてカワウソちゃんとおしゃべりできるようにしようと思います！

仕組み 
流れ図としては以下のようになります。
 音声会話Botの概要   使った技術 
今回使った技術は以下の通りです。
 Node.js &amp;hellip; サーバサイドのJavascriptランタイム環境。フレームワークにはexpressを用い、テンプレートエンジンとしてejsを使用しました。
 VoiceText(Node.js SDK) &amp;hellip; HOYA株式会社さんの音声合成ソフトウェア。流暢な発声と感情表現できるのが特徴です。
 Dialogflow &amp;hellip; 自然言語対話のAIを簡単に作れるプラットフォームです。さくっとBotを作るのに向いています。
  作成の流れ 
では実際に作成していきましょう。
Dialogflow 
まずはDialogflowで対話するAIBotを作っていきます。
Dialogflowにログインし、「Create new agent」で新しいエージェントを作成します。
 Entity</description>
    </item>
    
    <item>
      <title>てくてく勉強会12月6日</title>
      <link>https://persol-pt.github.io/posts/tech-workshop1206/</link>
      <pubDate>Fri, 08 Dec 2017 18:48:09 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop1206/</guid>
      <description>皆さんこんにちは、2017年入社の藤井です。
今回のブログでは弊社の私たちストラテジーサービス部テクノロジーサービスグループテクノロジーサービスチーム(通称テクテク)が
毎週行っている技術勉強会について新人目線で触れていきたいと思います。

テクテクでは毎週水曜日に技術勉強会を行っています。
この勉強会では、それぞれ自分が学びたいテーマを宣言し、1人ずつリレー形式で発表を行っています。
テクテクは現在13名のため、2か月に1回のペースで自分の発表が回ってくるイメージですね。

テーマはサーバーレスアーキテクチャ、機械学習、ブロックチェーンのようなニッチな技術領域のものであったり、
Vue.jsやKotlin、XamarinやGCPなど言語やクラウドを学んで何かアプリを作成してくるなど人によって様々です。

では、実際に勉強会をレポートしていきましょう！
12月6日の勉強会　テーマ「フロントエンドにおけるIaCとCI」 
  2017年12月6日の勉強会-1   
これは12月6日に行われた勉強会の写真です。

今回の発表者は外部のフロントエンド関連の勉強会で多く発表されている山本さん。

今回のお話は「フロントエンドにおけるIaCとCI」についてでした

IaC (Infrastructure as Code) ということで、
 なぜITインフラの構成をコード化すべきなのか IaCの実際の使用方法
  など基本的なところから、
 IoCで作成したテンプレートのプロビジョニングの自動化(CI)について
 利用するCIツールのそれぞれの区分けや比較
 実際に行ったCUIでのCIツールでの管理の具体的な構成や手順
  などをお話頂きました。

  2017年12月6日の勉強会-2   
発表の詳しい内容はこちらをご覧ください！！↓↓↓

フロントエンドのIaCとCIとLoC

OpenAPIでAPI GatewayのモックAPIを作り、コード不要のAPIテストツールDreddでテスト

インフラ基盤のコード化、ビルドやテストの自動化は
開発の効率化・省力化にもつながりますし、
コード管理できればメンテナンスが属人化されることも防げます。

いいことずくめですね。

ぜひIoCとCIで安全・スマート・モテル駆動開発を！</description>
    </item>
    
  </channel>
</rss>