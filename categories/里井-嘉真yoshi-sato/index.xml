<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>里井 嘉真yoshi Sato on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/categories/%E9%87%8C%E4%BA%95-%E5%98%89%E7%9C%9Fyoshi-sato/</link>
    <description>Recent content in 里井 嘉真yoshi Sato on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 16 Nov 2018 15:19:20 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/categories/%E9%87%8C%E4%BA%95-%E5%98%89%E7%9C%9Fyoshi-sato/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>勉強会[帰宅時のルーティンを効率化する]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_shortcut/</link>
      <pubDate>Fri, 16 Nov 2018 15:19:20 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_shortcut/</guid>
      <description>皆さんこんにちは。
今日で齢23の里井です。
今週もテクテクの勉強会の様子をお送りいたします。
よろしくお願いします。

※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。

Qiita - パーソルプロセス&amp;amp;テクノロジー

今週は、我らがテクテク部のマネージャー川崎さんのプレゼンで、
発表テーマは「帰宅時のルーティンを効率化する」でした。


帰宅時のルーティンを効率化する みなさんはこんなことはないでしょうか？
仕事が終わり、家に帰るときに「今から帰るよー」とメールをしなければならない。
しかし、日中一生懸命働くあまり疲れてメールなんか打ちたくないし何も考えたくない
そんな毎日のルーティンを省力化する手段として、iOSで利用できる「ショートカット」を使ってみてはどうでしょう？
ちなみに私はApple製品を持っていないので、iPhoneのスタイリッシュさに当てられ失神しそうになりながら発表を聴いていました。そう。iPhoneならね。


ショートカットとは？ ショートカットとは、iOS 12の配信に合わせて登場したアプリで、iOS端末ではApp Storeからインストールすることが出来ます。
iOSの標準機能やサードパーティアプリの操作をあらかじめプログラミングしておき、一連の動作をショートカットとしてまとめて実行できるというものです。
ショートカットで出来るアクションには、iOSの基本機能で出来ること、ダウンロードしたアプリ、基本的な制御文を使ったスクリプト実行があります。
作成したショートカットは、ウィジェットとしてホーム画面に登録するほかに、Siriで実行可能なアクション登録することで「ヘーイシリ、うんちゃらーかんちゃらー」とか出来ます。ほとんどマジック。
また、作ったショートカットをiCloudで共有し、他の端末で利用することも出来ます。
以下はショートカットを作成する際に選べるアクションの一覧です。
       これだけ見てもショートカットで出来ることの幅広さが伺えます。


はじめかた まずはiPhoneとかのiOS端末を用意します。
標準ではインストールされていないので、iOS 12にアップデートしてからAppStoreよりショートカットをインストールします。
 ショートカットを作成をタップします。作成したショートカットはライブラリと呼ばれる場所に登録されていくそうです。
 1からショートカットを作成することも出来ますが、Appleがサンプルを用意しており、最初はこれらを雛形として修正するとやりやすいそうです。
 アクションリストからアクションと呼ばれる処理を選択し、ショートカットを組み立てていくようです。
 

帰るメールショートカットの作成 最初のテーマに戻ります。
仕事終わりにご家族に帰宅しますメールを送る川崎さんは、これを自動化するショートカットを作成します。
毎回同じ文面だと味気ないので、微妙な表記ゆれでメールに温かみを加えるという受け取る側の配慮も欠かさない川崎さんです。
さすがは我々の上司と言わざるを得ません。
 これでご家族の方も安心ですね。
帰宅時間から黒色な感が醸し出されているようにも見えますが、私は毎日定時帰りなので恐らく飲み会終わりとかなのでしょう。
酔っ払っていても分単位で帰宅予定時間を報告できるので、予想外に泥酔してしまっても大丈夫です。
文面を生成し、LINEで自動的にメッセージを送信するショートカットを作成したかったそうですが、LNEアプリ側が対応しておらず、代替案として自動生成したメッセージをクリップボードにコピーした状態でLINEアプリを自動的に開き、ペースト→送信の2アクションで送信できる状態に持っていくものにしたのだそうです。
 帰宅予定時間については、現在地から自宅までの移動時間をマップアプリで取得し、現在の時刻から計算した上で文面に組み込んでいるようです。</description>
    </item>
    
    <item>
      <title>勉強会[RPAを学ぶ　～UiPath～]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_rpa2/</link>
      <pubDate>Fri, 19 Oct 2018 10:46:23 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_rpa2/</guid>
      <description>皆さんこんにちは。
パーソルプロセス＆テクノロジー株式会社のyoshi-satoです。
今週もテクテクの勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者はtodakenさんです。テーマは「RPAを学ぶ ～UiPath～」でした。

テーマ「RPAを学ぶ ～UiPath～」 RPA(Robotic Process Automation)といえば、人間の代わりにロボットを使って業務を行うものですが、
定型業務とか自動化できるものはガンガン自動化しちゃおうぜ！ってことで昨今バズワードになっています。
todakenさんは前回もRPAについての発表をしていますが、
今回は主にUiPathと呼ばれるものについてのお話でした。
 RPAとは そもそもRPAとは？
Robotic Process Automation、直訳してしまうと「ロボットによるプロセスの自動化」
ですが、ホワイトカラー労働者の間接業務を自動化するためのテクノロジーで、
同じ作業の繰り返しや単純なフロント/バックオフィス業務を自動化することが出来ます。
UiPathでできること RPAを実現するためのツールはたくさんの種類がありますが、その中でも今回はUiPathを取り上げます。
UiPathで実現できることは多岐に渡りますが、
 Excel、Word、Access等のデスクトップ上で行うアプリケーション操作 クラウドサービスを含むWebアプリケーションの操作 Webブラウザからのデータ取得（スクレイピング）  などが可能です。
Community Editionであれば、多少の制限はありますが無料で利用できます。
UiPathの構成 UiPathは以下の3つの要素で構成されています。
順番に見ていきましょう。
1. UiPath Studio もっともRPAといえば！というようなツールが、UiPath Studioです。
UiPath Studioでは、アクティビティと呼ばれるロボットの動作をドラッグ＆ドロップで指定し、ワークフローを作成します。
直感的な操作でワークフローを組み立てることが出来るため、プログラミングコードは使用せずに進められます。
実際に人間の操作を記録して、ロボットを作成することも可能です。
2. UiPath Orchestrator UiPath Orchestratorは、作成したロボットの稼働状況の管理や、
ジョブのスケジューリングやキューインが出来る、運用ツールです。
Webベースで利用でき、リリース管理やログ管理もできます。
また、APIを用いて外部のアプリケーションと連携をとることも出来ます。
3. UiPath Robot こちらはUiPath Studioで作成した作業シナリオを実際に実行するツールです。
業務で利用している個々端末で実行されるFront Office Robot(FOR)と、
操作不要でサーバー上で動作するため常に稼動し続けられるBack Office Robot(BOR)の2種類があります。</description>
    </item>
    
    <item>
      <title>勉強会[スマートスピーカーその4]</title>
      <link>https://persol-pt.github.io/posts/smartspeaker4/</link>
      <pubDate>Fri, 28 Sep 2018 11:44:42 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/smartspeaker4/</guid>
      <description>皆さんこんにちは。
パーソルプロセス＆テクノロジー株式会社のyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者は、千葉さんです。テーマは「スマートスピーカー4」でした。
 
テーマ「スマートスピーカー４」 　スマートスピーカーといえば、Alexa、Google Home、Clovaなど、最近では様々な種類のものが発表されていますが、今回はAlexaが中心のテーマになります。
千葉さんは今までにも何度か勉強会でスマートスピーカーについての発表を行っており、恒例となっているこのテーマは4回目だそうです。 スマートスピーカー市場 　日本でも拡大してきているスマートスピーカー市場ですが、それでもやはりアメリカがダントツで、ついで中国の順で市場が大きくなっているようです。
2018年末には流通量が100万台にも達する見込みです。   新製品の紹介 　2018年9月20日にAmazonより発表された新製品についてご紹介いただきました。
うち2つはまったくの新製品というよりはアップグレードですが、大きな改善が施されたようです。
Echo dot 　Echoシリーズの中でAlexaをもっとも手軽に楽しめる製品で、新しいスピーカーの搭載により、前モデル（第2世代）より音質が向上し、よりパワフルな音を実現しています。筐体デザインも刷新され、5,980円（税込）で販売されています。
Echo plus 　アップグレードされたスピーカーで、前モデル音質が向上し、新しいデザイン、さらに近距離無線通信規格の1つであるZigBee対応のスマートハブを内蔵しています。17,980(税込)で販売されています。 従来のAlexaで照明や家電を操作するにはAlexaとは別に操作したい機器に対応するハブを用意する必要がありましたが、Echo plusにはZigBeeに対応したハブが内蔵されているので、ZigBeeに対応する機器であれば別途ハブを用意することなく操作することが出来ます。
また、温度センサーも搭載されているので、温度を確認してからエアコンを操作する、といったようなことも出来るそうです。
Echo show 　10.1インチのHDディスプレイ、Dolbyプロセッシング搭載の上質なスピーカーと、前述のEcho Plus同様ZigBee対応のスマートホームハブを内蔵しています。27,980円(税込)で販売されています。 ディスプレイが付き、音声以外にも視覚的に情報を確認することが出来るスマートスピーカーです。
もはやスピーカーと呼ぶには無理がありそうですが、画面で確認しながら操作が出来るので便利そうです。
ちなみに発表者である千葉さんには「カラオケのデンモクに見えた」そうです。
Echo spot 　置時計っぽいAlexaです。かわいい。
小型でありながら液晶画面が搭載されており、カメラを使ってビデオ通話をすることも出来ます。
Echo sub 　Alexaと接続できるサブウーファーです。
2台のAlexaスピーカーと接続すれば、1 + 1 + サブウーファーで重低音バリバリの2.1chステレオ再生が可能になります。
つまり、低音が内臓に響くようなボイスのAlexaちゃんと会話することも可能になります。たぶん。
新機能の紹介 　あわせて新機能もご紹介いただきました。
ただし、まだ新しい機能ということで、現状日本では※が付くものがほとんどのようです。
コンテキストキャリーオーバー 　Alexaに質問を投げかけると、質問が完全なものでなくても自動的に補完して回答してくれる機能です。</description>
    </item>
    
    <item>
      <title>勉強会[Golang入門]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_introduction_to_golang/</link>
      <pubDate>Mon, 27 Aug 2018 14:19:06 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_introduction_to_golang/</guid>
      <description>皆さんこんにちは。
パーソルプロセス&amp;amp;テクノロジーのyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
ぜひこちらもご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者は、テクテク部のビトルさんで、発表テーマは「Golang入門」でした。

 
Golang入門  ディレクトリ構成について Golangでは、開発者がコードを1つにまとめたものをworkspaceと呼びます。
 workspaceは、bin, pkg, srcの3つのディレクトリで構成されています。
binには実行可能なコマンドのバイナリファイルが配置され、
pkgには、インストールされたパッケージが配置されます。
srcは各ソースファイルやリポジトリを配置するディレクトリで、リポジトリが異なる場合はディレクトリを分けます。
Goのツールはパッケージとソースをビルドし、完成したバイナリをpkgとbinそれぞれにインストールします。

GOPATHについて GOPATHとは、自分のworkspaceのパスを指定するための環境変数です。
デフォルトでは、Unix系OSであれば$HOME\goになっており、Windowsであれば%USERPROFILE%\goになります。
デフォルトで指定されているパス以外の場所で作業を行いたい場合、GOPATHを変更する必要があります。
 
文法について Golangの基本的な文法をご紹介いただきました。
文法についてビトルさん自身は、Goのチュートリアルである A Tour of Go を参考にされたそうです。

パッケージ 外部のコードを使用したい場合、他の言語と同じように、import文でインポートします。
パッケージ名は&amp;rdquo;&amp;ldquo;で囲みますが、複数のパッケージを同時にインポートしたい場合、さらに丸括弧で囲みグループであることを示します。
標準パッケージでないものは、ビルド時にインストールされます。
 
関数 Golangで関数を定義する際は、Java等と同じように引数と返り値の両方の型を宣言します。
また、返り値を宣言する際、複数の返り値を宣言しておくことで、2つ以上の値をreturnすることができます。
さらに、返り値の変数名を定義することも可能で、関数内で変数として利用することもできます。
関数内でreturnに値を渡していなければ、変数名を定義した返り値が自動的に返されます。
 
変数・定数 変数を宣言する際は、varを使います。
変数の定義時に変数の型を宣言する必要がありますが、定義と同時に初期値を代入していれば、
初期値から自動的に型が判断されます。
関数の中ではvarの省略形として:=を使うこともできますが、関数の外ではvar, func等のキーワードで始まる宣言しか
利用できません。
定数は、constで宣言します。定数宣言の省略形はありません。
 
型 変数、定数を宣言する際に初期値を代入せずに、型宣言のみを行った場合、型によってそれぞれの初期値が
自動的に代入されます。
初期値は、
・int,float等の数字型の場合は0
・bool型の場合はfalse</description>
    </item>
    
    <item>
      <title>勉強会[エンジニアの仕事を考える～徒然なるままに]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_engineernoshigoto/</link>
      <pubDate>Fri, 03 Aug 2018 18:30:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_engineernoshigoto/</guid>
      <description>皆さんこんにちは。
パーソルプロセス＆テクノロジー株式会社のyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者、山本さんで、テーマは「エンジニアの仕事を考える～徒然なるままに」です。
 
テーマ「エンジニアの仕事を考える～徒然なるままに」 山本さんは、Windows95が現役だったころ、Pentium ⅠないしはⅡが世の中を席巻していたころから
エンジニアとしてお仕事をされてきて、今も現役で開発業務をされています。
今回は、そんな山本さんからのエンジニアとしてのキャリアについてのアドバイス的な勉強会でした。
会社でキャリアを積む 山本さんがエンジニアとして働き始めたころ、エンジニアとしての定年は60歳でも65歳でも70歳でもなく
35歳であるという「35歳定年説」については聞いたことがなかったということです。
しかしながら、当時を振り返っても35歳を超えて現場でコーディングをしている人はおらず、
40代を超えるとマネージャーなどの偉い人ばかりだったといいます。
IT企業で出世するとなると、現場でコーディングするのをやめてマネージャーなどの管理･調整する側の
役職に就くか、エンジニアのスペシャリストとして出世するかどちらかだとおっしゃっていました。
しかし、これまで何度か転職を経験している中では、どこの会社でもスペシャリストとして出世することは
難しいと感じたそうです。
独立してキャリアを積む エンジニアが会社に留まらずにキャリアを積む方法の１つとして、会社を離れ独立するという選択肢があります。
フリーのエンジニアとしてお仕事をしていた経験のある山本さんが利点として挙げたのは、
独立すると「見た目の」収入が増えるということと、会社勤めよりも領収書が切りやすいこと、
時間を自由に使えるという点です。
週休3日、4日でのんびり仕事をすることも、毎日24時間働いてしっかり稼ぐということもできるといいます。
ですが反面、営業や経理など自分でやらなければいけないことも増え、常に仕事がなくなることや、体調を崩して働けなく
なることを考えなければいけないので、やりたいことがあって独立するのでなければ心の弱い方にはオススメできないということでした。
それよりは転職して新しい人と新しいつながりを作ったり、後述のダブルワークを試してみるほうが良いようです。
さらに、新しい技術を追うのが大変になるということもおっしゃっていました。技術を学んだがその技術が
実際には役に立たなかった、なんてことはざらにあるかと思います。フリーであればこれを自分で取捨選択しながら学習する
ことになるので、気軽に勉強できないようです。 ダブルワーク ほかにキャリアを積む（もしくは収入を増やす）手段としては、転職する、株をはじめる、仮想通貨に投資する、怪しげなアパートを経営する、俳優になる&amp;hellip;etc。
ありますが、その中でも山本さんのオススメはダブルワークです。
勤めている会社の就業規則にもよりますが、独立する前の練習として、もしくは一人で仕事をするのが
本当に自分に合っているのかを確認することができるといいます。
小さいプロジェクトを「わがままな」クライアントと自分で調整しながら仕事をしないといけないので、
技術以外のスキルやノウハウも蓄積でき、会社勤めなので収入も安定しているという利点があります。
そう聞くとなんだかいいこと尽くめな気がしてきます。
しかし、いくつか注意点もあります。
1つは、そもそも週に数日という仕事が多くはないということです。
はじめはがっつり仕事をしてクライアントと知り合いになってから、その後は週数日で続けていく。という
方法が良いというアドバイスでした。
もうひとつは、ダブルワークをする際に個人事業主登録をすると、会社を辞めた場合に失業してないじゃん！と
言われ失業保険がおりなくなるということです。
個人事業主として登録する場合は先まで考えて行う必要がありそうです。
感想 まだエンジニアとして、というよりも社会人になってから数ヶ月しか経っていない私が今回の山本さんの
発表を聞いて感じたことは、これから如何様にでも進みようがあるという可能性です。
会社を辞めたりダブルワークをしたりといったようなことは新卒数ヶ月の私にはまだまだ
想像できませんが、1つの会社に一生勤め上げるのも一つの選択肢、転職も一つの選択肢、職種を変えるのも
一つの選択肢だと考えると、怖いと感じると同時にたくさんの道が広がっているように感じました。
山本さん、ありがとうございました。</description>
    </item>
    
    <item>
      <title>勉強会[RaspberryPiとBluetoothでスマホを検知してみた]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_bluetooth/</link>
      <pubDate>Fri, 27 Jul 2018 18:30:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_bluetooth/</guid>
      <description>皆さんこんにちは。
パーソルプロセス＆テクノロジー株式会社のyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者はテクテクMGRの川崎さんです。
発表テーマは、「RaspberryPiとBluetoothでスマホを検知してみた」でした。
 
テーマ「RaspberryPiとBluetoothでスマホを検知してみた」 IoTの代名詞的な名声をほしいままにするRaspberryPi(以下ラズパイ)ですが、川崎さんはこのラズパイを使って
毎日の勤怠時間の入力を自動化したいと考えました。
弊社では毎日の勤務時間をTAManagerと呼ばれる勤怠システムに入力することになっているのですが、
毎日のことということもあり若干微妙にほんの少しわずらわしく感じることもあります。
怠慢・短気・傲慢を美徳とするエンジニアにとって、この煩わしさをそのままにして生きていくわけにはいきません。
実現方法 川崎さんは、ラズパイをオフィスの自席に置いておき、
Bluetoothで自分のスマホが接近したか離れたかを検知することで出勤・退勤時間の
打刻を行うことを考えました。
今回は勤怠入力の仕様（休み時間や一時離席はどうするか等）は後で考えるものとして、
ラズパイでスマホを検知するところまでの発表でした。

使うもの 今回Bluetoothでラズパイとスマホの距離を定期的にチェックするために使うものです。
 hcitool  raspbianで利用できる、Bluetooth機器に接続するためのツール。 機器のスキャン、強度計測、ペアリングができる。  l2ping  ネットワークレイヤ2でpingするツール。 つまりMacアドレスに対してpingする。   
仕組み Railsで定期的にペアリングされたスマホにpingを送り、接近、離脱をチェックする。
勉強会中のデモでは、あらかじめペアリングしたスマホを川崎さんが持ち会議室から離れると、
Slackにメッセージが送信されました。
 
課題 簡単にペアリングする仕組みの構築 ペアリングを行わなくてもスマホが近くにあるかないか程度のpingはできるが、
正確な距離を信号強度から測るにはペアリングが必要だそうです。
現段階ではラズパイとスマホのペアリングは手動で行うため、より簡単にペアリングできる
仕組みの構築が必要です。
勤怠の自動入力の仕様設定 今回はラズパイでスマホの接近・離脱を検知することができましたが、
勤怠システムへの自動入力となると、休み時間や一時離席などを考慮した仕組みを
作らなければいけません。
ほかに何ができそうか 最後に、川崎さんはオフィス以外でラズパイでスマホを検知して何ができそうかを
発表してくださりました。
 家に置いて子供の帰宅を通知する。 電気のオン・オフを自動で行う。 店頭に置いて特定の人の来店を店員に通知し、来店回数や購入履歴などを同期して接客対応を行う。  
以上、川崎さんの発表でした。
ラズパイは発想次第でいろいろなことに使えるので、今回のような</description>
    </item>
    
    <item>
      <title>勉強会[nissy&#39;s handy tools]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_nissy_tools/</link>
      <pubDate>Fri, 13 Jul 2018 18:30:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_nissy_tools/</guid>
      <description>皆さんこんにちは、はじめまして。
パーソルプロセス＆テクノロジー株式会社、EP統括部18年入社のyoshi-satoと申します。
今週は藤井さんに代わり私がテクテク部の勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者は同じテクテク部のnissyさんです。
テーマは、nissyさんが作ったツール紹介でした。
それぞれ簡単にご紹介したいと思います。 mackerel-plugin-timeline mackerel-plugin-timelineは、Mackerelのログ表示処理を高速化するプラグインです。
ロジックとしては、ログファイルを最終行付近までシークし、
下から読み込むようになっています。
check-md5 check-md5は、Mackerel等でMD5のバイナリハッシュ値を監視するプラグインです。
このプラグインを作った理由としては、バイナリハッシュ値を
勝手に書き換える輩がいたので犯人を見つけるために作った。そうです。
あまり治安が良くなかったようです。
smtping smtpingは、SMTPサーバを監視、検証するためのツールです。
ピュアなGo言語で書かれています。
「一番がんばったのにもはや誰もテキストコンテンツに興味がない・・・」
とは、nissyさん談です。
toever toeverは、EverNoteにノートを作成、ファイルの転送を行うコマンドラインツールです。
pythonで書かれています。
GitHubでのStarの数は驚異の15。激バズです。
やはりメジャーなサービスが絡むと人の目に留まりやすいようです。
txtmsk txtmskは、標準入力に入力した文字列をaes256方式で暗号化するツールです。
もちろん、同ツールで復号することもできます。
MacOSのKeychainと連携させることもできます。
作った理由としては、前の上司がslackにパスワードを貼りまくっていたので、
注意喚起のために作ったそうです。
phck phckは、Webサーバーのプロセスをチェックするツールです。
プロセスがすべて起動していればHTTPコード200を返し、
プロセスが1つでも落ちていればHTTPコード500を返します。
taii taiiは、tailコマンドのようなコマンドです。
というよりは、tailコマンドです。
作った経緯としては、新人さんの一人がいつまでたってもtailをtaiiと
タイプしてしまうのを見かね、それならばtaiiコマンドを作ってあげよう。
という経緯だそうです。
エイリアスを設定すればいいのではないか、という声も上がりましたが、
イチから作るところにロマンがあります。
nissyさんいわく欠点として、システムコールなのでめちゃめちゃに重い
という点が挙げられるそうです。
loggerkun loggerkunは、ロガーのフォーマットを自由に変更するツールです。
仕組みとしては、テンプレートエンジンを利用して実装されています。
awslogger awsloggerは、Amazon CloudWatch Logsにログを書き出すツールです。
colle colleは、Go言語で書かれたRSSフィードリーダーです。
このcolleのすごいところは、某DMMの女性陣の画像を3秒ほどですべて取ってくることができるところだそうです。
仕組みとしては、非同期にガッと行ってガッと取ってくるロジックだそうですが、
今現在も使えるかどうかは不明です。
bon bonは、Goで書かれたWebフレームワークです。
特徴として、軽量であること、サードパーティのパッケージを利用していないことが挙げられます。
感想 今回nissyさんにご紹介いただいたツール群は、1つを除いてGoで書かれており、</description>
    </item>
    
  </channel>
</rss>