<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ビトル on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/categories/%E3%83%93%E3%83%88%E3%83%AB/</link>
    <description>Recent content in ビトル on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 21 Dec 2017 12:35:16 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/categories/%E3%83%93%E3%83%88%E3%83%AB/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aws CodeStarを試してみる</title>
      <link>https://persol-pt.github.io/posts/using-aws-code-star/</link>
      <pubDate>Thu, 21 Dec 2017 12:35:16 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/using-aws-code-star/</guid>
      <description>今回は Amazon Web Services Advent Calendar 2017の22日目の記事を書きたいと思います。

AWS CodeStarについて書こうと思います。
CodeStarは一言で言うとCI/CD環境を全てAWSで構築・運用できるサービスです。
Code三兄弟(Code Commit、Code Build、Code Deploy)などのサービスと連携して、 アプリケーションコードのコーディング、ビルド、テスト、デプロイできる環境の構築を可能にします。
開発者は素早く必要なアプリケーション開発環境と動作するコードを用意することでできるそうです。


試してみる まずはアプリケーションのテンプレートを一つ選びます。
今回はNode.jsのLambdaアプリケーションを選びます。

 次にプロジェクトの詳細を設定します。プロジェクト名は好きなものを入れてください。
レポジトリはAWS CodeCommitとGitHubのどちらかを選べますが、今回はCodeCommitを選びます。

 ここではプロジェクトのどの部分でどのサービスが利用されるかが確認できます。
ソースの管理からデプロイまで全てAWS のサービスで管理できることがわかります。

 次にコードの編集方法を選択します。
EclipseやVisual StudioなどのIDEと連携もできますが、今回はコマンドラインで編集します。

 次の画面ではアプリケーションのソースの取得方法の手順を確認できます。
今回はsshでソースを取得しますので、ssh周りの設定が終わったらこの画面に表示されているソースのレポジトリのURLをコピーしましょう。

 ではコピーしたレポジトリのURLでgit cloneしましょう。

$ git clone ssh://git-codecommit.ap-northeast-1.amazonaws.com/v1/repos/awsCodeStartTest Cloning into &#39;awsCodeStartTest&#39;... The authenticity of host &#39;git-codecommit.ap-northeast-1.amazonaws.com (xx.xxx.xxx.xxx)&#39; can&#39;t be established. RSA key fingerprint is SHA256:xxx/xxxxx/x/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx. Are you sure you want to continue connecting (yes/no)?</description>
    </item>
    
    <item>
      <title>AWS X-Rayを使ってLambda内の処理をトレースしてみる</title>
      <link>https://persol-pt.github.io/posts/using-lambda-with-aws-xray/</link>
      <pubDate>Sun, 17 Dec 2017 17:51:27 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/using-lambda-with-aws-xray/</guid>
      <description>どもどもビトルです。 今回は AWS Lambda Advent Calendar 2017の１７日目の記事を書きます。
僕は今年の Serverlessconf Tokyoに行ってきたのですが、その時にちょくちょくAWSのX-Rayというサービスを耳にして気になったので、それについて書きます。

AWS X-Rayとは？ まず以下の特徴があります：
 リクエストのトレース 例外の収集 プロファイリング機能 分散型アプリケーションの動作分析の支援  概要としては、開発者が作ったアプリケーション内のリクエストに関するデータを収集し、 それらを可視化・フィルタリングできるようにしてアプリケーション内のボトルネックの発見などを手助けします。 また、収集したリクエストのデータを元にリクエストとレスポンスだけでなく、アプリ内でコールされたDBやWeb APIなどのAWS内のリソース・サービスに関する情報も収集することができます。

実際に使ってみた ではさっそく試して見ましょうか。
今回もちゃちゃっとServerless Frameworkを使ってデプロイします。まずプロジェクトを作成しましょう。
sls create -t aws-nodejs-ecma-script -p aws-xray cd aws-xray  そして serverless.yml を以下のように編集します。
service: name: aws-xray plugins: - serverless-webpack - serverless-plugin-tracing # トレース有効用のプラグイン provider: name: aws runtime: nodejs6.10 stage: dev region: ap-northeast-1 tracing: true # X-Rayでのトレースを有効にする iamRoleStatements: - Effect: Allow Action: - dynamodb:GetItem - dynamodb:PutItem - xray:PutTraceSegments #X-Ray周りの権限も忘れずに - xray:PutTelemetryRecords #X-Ray周りの権限も忘れずに Resource: &amp;quot;*&amp;quot; custom: region: ${self:provider.</description>
    </item>
    
    <item>
      <title>おじさんLINEごっこBOTを作ってみた</title>
      <link>https://persol-pt.github.io/posts/line-ojisan-bot/</link>
      <pubDate>Fri, 15 Dec 2017 16:10:08 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/line-ojisan-bot/</guid>
      <description>かなり遅れてしまいましたが、今回はボット (Bot) Advent Calendar 2017の10日目の記事を書きます。

突然ですが、みなさん「 おじさんLINEごっこ 」という遊びをご存知ですか？ 最近若い女子同士で流行っているこの遊びですが、今時のSNSにありそうな「おじさんの文章」を真似しながら送り合うというものです。
まず特徴としては以下が挙げられます：
 長い 句読点が多い 無駄に褒めたがる 名前は基本的にちゃん(チャン)付け ちょくちょく自分語りを挟んでくる 隠しきれない下心  
結構エグい感じがしますね。
ではこの情報を元にそれに近いLINEおじさんBOTを作ってみようと思います。
用意するものはこちらです：
 LINE Developersアカウント Dialogflowアカウント  構成はシンプルにこんな感じにしています。
 LINEおじさんBOT構成図   
↑の流れをざっくり説明すると：

①LINEおじさんアカウントに投げたメッセージを

②Lambdaで受け取って

③そのメッセージをdialogflowに投げて

④dialogflowから返ってきた返答を

⑤そのままLINEに返す

Lambdaで実装したいので、serverless frameworkでデプロイをちゃちゃっとできるようにしておきました。
まずは構成定義用のyaml。
# serverless.yml service: name: line-ojisan provider: name: aws runtime: nodejs6.10 stage: dev region: ap-northeast-1 custom: region: ${self:provider.region} prefix: ${self:service}-${self:provider.stage} config: ${self:custom.</description>
    </item>
    
    <item>
      <title>Node.jsでHTTP/2を動かしてみる</title>
      <link>https://persol-pt.github.io/posts/using-http2-with-nodejs/</link>
      <pubDate>Sat, 09 Dec 2017 04:22:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/using-http2-with-nodejs/</guid>
      <description>どうも、ビトルです。
今回はNode.js Advent Calendar 2017の9日目の記事になります。

この記事ではNode.jsで現在コア機能に実験的に導入されているHTTP/2について書きたいと思います。

Serverside 
単純なHTTPサーバとしての処理はこんな感じに実装できます。

const http2 = require(&#39;http2&#39;); const fs = require(&#39;fs&#39;); const server = http2.createSecureServer({ key: fs.readFileSync(&#39;localhost-privkey.pem&#39;), cert: fs.readFileSync(&#39;localhost-cert.pem&#39;) }); server.on(&#39;error&#39;, (err) =&amp;gt; console.error(err)); server.on(&#39;socketError&#39;, (err) =&amp;gt; console.error(err)); server.on(&#39;stream&#39;, (stream, headers) =&amp;gt; { stream.respond({ &#39;content-type&#39;: &#39;text/html&#39;, &#39;:status&#39;: 200 }); stream.end(&#39;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&#39;); }); server.listen(8080);  ChromeやFirefoxなどのブラウザはHTTP/2を利用する際はSSLが必須となっているので、証明書を用意する必要があります。 証明書は自己証明書でも作成できます。

openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj &#39;/CN=localhost&#39; \ -keyout localhost-privkey.pem -out localhost-cert.</description>
    </item>
    
  </channel>
</rss>