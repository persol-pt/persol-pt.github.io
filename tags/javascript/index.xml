<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 21 Dec 2017 23:59:59 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>We Are JavaScripters!で弟のふんどしで相撲をとってきました</title>
      <link>https://persol-pt.github.io/posts/wejs14/</link>
      <pubDate>Thu, 21 Dec 2017 23:59:59 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/wejs14/</guid>
      <description>JavaScript Advent Calendar 2017 21 日目の記事です。

本日はWe Are JavaScripters! @14th【初心者歓迎 LT 大会】で LT してきました。
私の大好きなコミュニティで、よく参加させていただいてます。

私のチームでは React, Flow, Jest など、Facebook 製品をよく使っておりますので Facebook のフロントエンド開発スタイルについて発表してきました。

  ご覧いただいてわかったと思いますが、
今回、ただ弟の知識だけを書いたあげく、最終的に弟を前に出してインタビューするだけという非常にエコな資料を作りまして、

「お前いらなかったじゃねーかよ！」「弟の肩にのっかりすぎだろ！」「帰れ！」など、とても反響が大きく、

私はとても気持ちがよかったです。

ちなみに Facebook には訪問した方々が落書きをする THE FACEBOOK WALL がありますが、
私も先日に遊びに行ったとき落書きさせてもらいました。どこかわかりますか？（どうでもいいですよね）
 左下でした！
 会社名ではなく、自分の名前を書く、自分中心の男、それが私です。
ちなみにシアトルの風景画は別の方が描いた絵ですが、おかげさまでただの YAMAMOTO がオシャレな YAMAMOTO になりました。

WeJS の他の方の資料はもっと魅力的ですので、ぜひご覧ください
    こちらの WeJS まとめ記事もおすすめです！
We Are JavaScripters!@14th まとめ

以上、徹底気に他人のふんどしを履きまくる男、山本がお送りしました。</description>
    </item>
    
    <item>
      <title>AWS X-Rayを使ってLambda内の処理をトレースしてみる</title>
      <link>https://persol-pt.github.io/posts/using-lambda-with-aws-xray/</link>
      <pubDate>Sun, 17 Dec 2017 17:51:27 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/using-lambda-with-aws-xray/</guid>
      <description>どもどもビトルです。 今回は AWS Lambda Advent Calendar 2017の１７日目の記事を書きます。
僕は今年の Serverlessconf Tokyoに行ってきたのですが、その時にちょくちょくAWSのX-Rayというサービスを耳にして気になったので、それについて書きます。

AWS X-Rayとは？ まず以下の特徴があります：
 リクエストのトレース 例外の収集 プロファイリング機能 分散型アプリケーションの動作分析の支援  概要としては、開発者が作ったアプリケーション内のリクエストに関するデータを収集し、 それらを可視化・フィルタリングできるようにしてアプリケーション内のボトルネックの発見などを手助けします。 また、収集したリクエストのデータを元にリクエストとレスポンスだけでなく、アプリ内でコールされたDBやWeb APIなどのAWS内のリソース・サービスに関する情報も収集することができます。

実際に使ってみた ではさっそく試して見ましょうか。
今回もちゃちゃっとServerless Frameworkを使ってデプロイします。まずプロジェクトを作成しましょう。
sls create -t aws-nodejs-ecma-script -p aws-xray cd aws-xray  そして serverless.yml を以下のように編集します。
service: name: aws-xray plugins: - serverless-webpack - serverless-plugin-tracing # トレース有効用のプラグイン provider: name: aws runtime: nodejs6.10 stage: dev region: ap-northeast-1 tracing: true # X-Rayでのトレースを有効にする iamRoleStatements: - Effect: Allow Action: - dynamodb:GetItem - dynamodb:PutItem - xray:PutTraceSegments #X-Ray周りの権限も忘れずに - xray:PutTelemetryRecords #X-Ray周りの権限も忘れずに Resource: &amp;quot;*&amp;quot; custom: region: ${self:provider.</description>
    </item>
    
    <item>
      <title>Node.jsでHTTP/2を動かしてみる</title>
      <link>https://persol-pt.github.io/posts/using-http2-with-nodejs/</link>
      <pubDate>Sat, 09 Dec 2017 04:22:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/using-http2-with-nodejs/</guid>
      <description>どうも、ビトルです。
今回はNode.js Advent Calendar 2017の9日目の記事になります。

この記事ではNode.jsで現在コア機能に実験的に導入されているHTTP/2について書きたいと思います。

Serverside 
単純なHTTPサーバとしての処理はこんな感じに実装できます。

const http2 = require(&#39;http2&#39;); const fs = require(&#39;fs&#39;); const server = http2.createSecureServer({ key: fs.readFileSync(&#39;localhost-privkey.pem&#39;), cert: fs.readFileSync(&#39;localhost-cert.pem&#39;) }); server.on(&#39;error&#39;, (err) =&amp;gt; console.error(err)); server.on(&#39;socketError&#39;, (err) =&amp;gt; console.error(err)); server.on(&#39;stream&#39;, (stream, headers) =&amp;gt; { stream.respond({ &#39;content-type&#39;: &#39;text/html&#39;, &#39;:status&#39;: 200 }); stream.end(&#39;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&#39;); }); server.listen(8080);  ChromeやFirefoxなどのブラウザはHTTP/2を利用する際はSSLが必須となっているので、証明書を用意する必要があります。 証明書は自己証明書でも作成できます。

openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj &#39;/CN=localhost&#39; \ -keyout localhost-privkey.pem -out localhost-cert.</description>
    </item>
    
  </channel>
</rss>