<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/tags/go/</link>
    <description>Recent content in Go on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 27 Aug 2018 14:19:06 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>勉強会[Golang入門]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_introduction_to_golang/</link>
      <pubDate>Mon, 27 Aug 2018 14:19:06 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_introduction_to_golang/</guid>
      <description>皆さんこんにちは。
パーソルプロセス&amp;amp;テクノロジーのyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
ぜひこちらもご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者は、テクテク部のビトルさんで、発表テーマは「Golang入門」でした。

 
Golang入門  ディレクトリ構成について Golangでは、開発者がコードを1つにまとめたものをworkspaceと呼びます。
 workspaceは、bin, pkg, srcの3つのディレクトリで構成されています。
binには実行可能なコマンドのバイナリファイルが配置され、
pkgには、インストールされたパッケージが配置されます。
srcは各ソースファイルやリポジトリを配置するディレクトリで、リポジトリが異なる場合はディレクトリを分けます。
Goのツールはパッケージとソースをビルドし、完成したバイナリをpkgとbinそれぞれにインストールします。

GOPATHについて GOPATHとは、自分のworkspaceのパスを指定するための環境変数です。
デフォルトでは、Unix系OSであれば$HOME\goになっており、Windowsであれば%USERPROFILE%\goになります。
デフォルトで指定されているパス以外の場所で作業を行いたい場合、GOPATHを変更する必要があります。
 
文法について Golangの基本的な文法をご紹介いただきました。
文法についてビトルさん自身は、Goのチュートリアルである A Tour of Go を参考にされたそうです。

パッケージ 外部のコードを使用したい場合、他の言語と同じように、import文でインポートします。
パッケージ名は&amp;rdquo;&amp;ldquo;で囲みますが、複数のパッケージを同時にインポートしたい場合、さらに丸括弧で囲みグループであることを示します。
標準パッケージでないものは、ビルド時にインストールされます。
 
関数 Golangで関数を定義する際は、Java等と同じように引数と返り値の両方の型を宣言します。
また、返り値を宣言する際、複数の返り値を宣言しておくことで、2つ以上の値をreturnすることができます。
さらに、返り値の変数名を定義することも可能で、関数内で変数として利用することもできます。
関数内でreturnに値を渡していなければ、変数名を定義した返り値が自動的に返されます。
 
変数・定数 変数を宣言する際は、varを使います。
変数の定義時に変数の型を宣言する必要がありますが、定義と同時に初期値を代入していれば、
初期値から自動的に型が判断されます。
関数の中ではvarの省略形として:=を使うこともできますが、関数の外ではvar, func等のキーワードで始まる宣言しか
利用できません。
定数は、constで宣言します。定数宣言の省略形はありません。
 
型 変数、定数を宣言する際に初期値を代入せずに、型宣言のみを行った場合、型によってそれぞれの初期値が
自動的に代入されます。
初期値は、
・int,float等の数字型の場合は0
・bool型の場合はfalse</description>
    </item>
    
    <item>
      <title>勉強会[nissy&#39;s handy tools]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_nissy_tools/</link>
      <pubDate>Fri, 13 Jul 2018 18:30:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_nissy_tools/</guid>
      <description>皆さんこんにちは、はじめまして。
パーソルプロセス＆テクノロジー株式会社、EP統括部18年入社のyoshi-satoと申します。
今週は藤井さんに代わり私がテクテク部の勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者は同じテクテク部のnissyさんです。
テーマは、nissyさんが作ったツール紹介でした。
それぞれ簡単にご紹介したいと思います。 mackerel-plugin-timeline mackerel-plugin-timelineは、Mackerelのログ表示処理を高速化するプラグインです。
ロジックとしては、ログファイルを最終行付近までシークし、
下から読み込むようになっています。
check-md5 check-md5は、Mackerel等でMD5のバイナリハッシュ値を監視するプラグインです。
このプラグインを作った理由としては、バイナリハッシュ値を
勝手に書き換える輩がいたので犯人を見つけるために作った。そうです。
あまり治安が良くなかったようです。
smtping smtpingは、SMTPサーバを監視、検証するためのツールです。
ピュアなGo言語で書かれています。
「一番がんばったのにもはや誰もテキストコンテンツに興味がない・・・」
とは、nissyさん談です。
toever toeverは、EverNoteにノートを作成、ファイルの転送を行うコマンドラインツールです。
pythonで書かれています。
GitHubでのStarの数は驚異の15。激バズです。
やはりメジャーなサービスが絡むと人の目に留まりやすいようです。
txtmsk txtmskは、標準入力に入力した文字列をaes256方式で暗号化するツールです。
もちろん、同ツールで復号することもできます。
MacOSのKeychainと連携させることもできます。
作った理由としては、前の上司がslackにパスワードを貼りまくっていたので、
注意喚起のために作ったそうです。
phck phckは、Webサーバーのプロセスをチェックするツールです。
プロセスがすべて起動していればHTTPコード200を返し、
プロセスが1つでも落ちていればHTTPコード500を返します。
taii taiiは、tailコマンドのようなコマンドです。
というよりは、tailコマンドです。
作った経緯としては、新人さんの一人がいつまでたってもtailをtaiiと
タイプしてしまうのを見かね、それならばtaiiコマンドを作ってあげよう。
という経緯だそうです。
エイリアスを設定すればいいのではないか、という声も上がりましたが、
イチから作るところにロマンがあります。
nissyさんいわく欠点として、システムコールなのでめちゃめちゃに重い
という点が挙げられるそうです。
loggerkun loggerkunは、ロガーのフォーマットを自由に変更するツールです。
仕組みとしては、テンプレートエンジンを利用して実装されています。
awslogger awsloggerは、Amazon CloudWatch Logsにログを書き出すツールです。
colle colleは、Go言語で書かれたRSSフィードリーダーです。
このcolleのすごいところは、某DMMの女性陣の画像を3秒ほどですべて取ってくることができるところだそうです。
仕組みとしては、非同期にガッと行ってガッと取ってくるロジックだそうですが、
今現在も使えるかどうかは不明です。
bon bonは、Goで書かれたWebフレームワークです。
特徴として、軽量であること、サードパーティのパッケージを利用していないことが挙げられます。
感想 今回nissyさんにご紹介いただいたツール群は、1つを除いてGoで書かれており、</description>
    </item>
    
    <item>
      <title>勉強会[http request multiplexerと文字列マッチング]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop1222/</link>
      <pubDate>Fri, 29 Dec 2017 23:58:18 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop1222/</guid>
      <description>皆さんこんにちは、新卒の藤井大祐(daitasu)です。

今週も私たちパーソルプロセスアンドテクノロジーのテクテクチームが
行っている技術勉強会のレポートをしていきたいと思います。
今年の勉強会ブログはこれで最後になります。
今週の発表者は定期的に自身でパッケージを作成し、OSSに貢献しているnissyさん。
テーマは 「http request multiplexer と文字列マッチング」 でした。
12月22日の勉強会　テーマ「http request multiplexer と文字列マッチング」 
  
通常URLにリクエストする際、そのURL文字列にマッチするパターンを
登録されているパターンの中から検索し、呼び出されるハンドラを決めようとします。
このルーティング処理はその言語やフレームワークでの処理方法によって
大きく処理速度が異なります。
今回nissyさんは基数木(パトリシア木)という集合データ構造を用いて
Go言語でルーティング処理を行うパッケージを作成しました。
Bon(https://github.com/nissy/bon)

今回のお話では、
基本的なマッチングパターンのルールから
トライ木(Trie)による複数パターンマッチング や KMP といった
代表的な文字列パターンマッチングのアルゴリズム紹介
に始まり、

いくつかの代表的なアルゴリズムの速度比較を行いまいした。
以下はパトリシア木(Patricia Trie)の構造紹介とその速度表です。

Patricia Trie(https://github.com/nissy/mux/tree/patricia)

  Patricia Trieの構造     Patricia Trie 速度   
そしてその後、実際に自身がPatricia Trieをもとにチューニングし、
Go言語で作成したルーティング手法のパッケージ「 Bon 」についての紹介を行い、
他のGo言語フレームワークとの速度比較を行いました。

  Bon 比較     BonとGo言語フレームワークの速度比較</description>
    </item>
    
  </channel>
</rss>