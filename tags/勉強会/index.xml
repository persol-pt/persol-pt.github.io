<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>勉強会 on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/</link>
    <description>Recent content in 勉強会 on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 19 Oct 2018 10:46:23 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>勉強会[RPAを学ぶ　～UiPath～]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_rpa2/</link>
      <pubDate>Fri, 19 Oct 2018 10:46:23 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_rpa2/</guid>
      <description>皆さんこんにちは。
パーソルプロセス＆テクノロジー株式会社のyoshi-satoです。
今週もテクテクの勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者はtodakenさんです。テーマは「RPAを学ぶ ～UiPath～」でした。

テーマ「RPAを学ぶ ～UiPath～」 RPA(Robotic Process Automation)といえば、人間の代わりにロボットを使って業務を行うものですが、
定型業務とか自動化できるものはガンガン自動化しちゃおうぜ！ってことで昨今バズワードになっています。
todakenさんは前回もRPAについての発表をしていますが、
今回は主にUiPathと呼ばれるものについてのお話でした。
 RPAとは そもそもRPAとは？
Robotic Process Automation、直訳してしまうと「ロボットによるプロセスの自動化」
ですが、ホワイトカラー労働者の間接業務を自動化するためのテクノロジーで、
同じ作業の繰り返しや単純なフロント/バックオフィス業務を自動化することが出来ます。
UiPathでできること RPAを実現するためのツールはたくさんの種類がありますが、その中でも今回はUiPathを取り上げます。
UiPathで実現できることは多岐に渡りますが、
 Excel、Word、Access等のデスクトップ上で行うアプリケーション操作 クラウドサービスを含むWebアプリケーションの操作 Webブラウザからのデータ取得（スクレイピング）  などが可能です。
Community Editionであれば、多少の制限はありますが無料で利用できます。
UiPathの構成 UiPathは以下の3つの要素で構成されています。
順番に見ていきましょう。
1. UiPath Studio もっともRPAといえば！というようなツールが、UiPath Studioです。
UiPath Studioでは、アクティビティと呼ばれるロボットの動作をドラッグ＆ドロップで指定し、ワークフローを作成します。
直感的な操作でワークフローを組み立てることが出来るため、プログラミングコードは使用せずに進められます。
実際に人間の操作を記録して、ロボットを作成することも可能です。
2. UiPath Orchestrator UiPath Orchestratorは、作成したロボットの稼働状況の管理や、
ジョブのスケジューリングやキューインが出来る、運用ツールです。
Webベースで利用でき、リリース管理やログ管理もできます。
また、APIを用いて外部のアプリケーションと連携をとることも出来ます。
3. UiPath Robot こちらはUiPath Studioで作成した作業シナリオを実際に実行するツールです。
業務で利用している個々端末で実行されるFront Office Robot(FOR)と、
操作不要でサーバー上で動作するため常に稼動し続けられるBack Office Robot(BOR)の2種類があります。</description>
    </item>
    
    <item>
      <title>勉強会[スマートスピーカーその4]</title>
      <link>https://persol-pt.github.io/posts/smartspeaker4/</link>
      <pubDate>Fri, 28 Sep 2018 11:44:42 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/smartspeaker4/</guid>
      <description>皆さんこんにちは。
パーソルプロセス＆テクノロジー株式会社のyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者は、千葉さんです。テーマは「スマートスピーカー4」でした。
 
テーマ「スマートスピーカー４」 　スマートスピーカーといえば、Alexa、Google Home、Clovaなど、最近では様々な種類のものが発表されていますが、今回はAlexaが中心のテーマになります。
千葉さんは今までにも何度か勉強会でスマートスピーカーについての発表を行っており、恒例となっているこのテーマは4回目だそうです。 スマートスピーカー市場 　日本でも拡大してきているスマートスピーカー市場ですが、それでもやはりアメリカがダントツで、ついで中国の順で市場が大きくなっているようです。
2018年末には流通量が100万台にも達する見込みです。   新製品の紹介 　2018年9月20日にAmazonより発表された新製品についてご紹介いただきました。
うち2つはまったくの新製品というよりはアップグレードですが、大きな改善が施されたようです。
Echo dot 　Echoシリーズの中でAlexaをもっとも手軽に楽しめる製品で、新しいスピーカーの搭載により、前モデル（第2世代）より音質が向上し、よりパワフルな音を実現しています。筐体デザインも刷新され、5,980円（税込）で販売されています。
Echo plus 　アップグレードされたスピーカーで、前モデル音質が向上し、新しいデザイン、さらに近距離無線通信規格の1つであるZigBee対応のスマートハブを内蔵しています。17,980(税込)で販売されています。 従来のAlexaで照明や家電を操作するにはAlexaとは別に操作したい機器に対応するハブを用意する必要がありましたが、Echo plusにはZigBeeに対応したハブが内蔵されているので、ZigBeeに対応する機器であれば別途ハブを用意することなく操作することが出来ます。
また、温度センサーも搭載されているので、温度を確認してからエアコンを操作する、といったようなことも出来るそうです。
Echo show 　10.1インチのHDディスプレイ、Dolbyプロセッシング搭載の上質なスピーカーと、前述のEcho Plus同様ZigBee対応のスマートホームハブを内蔵しています。27,980円(税込)で販売されています。 ディスプレイが付き、音声以外にも視覚的に情報を確認することが出来るスマートスピーカーです。
もはやスピーカーと呼ぶには無理がありそうですが、画面で確認しながら操作が出来るので便利そうです。
ちなみに発表者である千葉さんには「カラオケのデンモクに見えた」そうです。
Echo spot 　置時計っぽいAlexaです。かわいい。
小型でありながら液晶画面が搭載されており、カメラを使ってビデオ通話をすることも出来ます。
Echo sub 　Alexaと接続できるサブウーファーです。
2台のAlexaスピーカーと接続すれば、1 + 1 + サブウーファーで重低音バリバリの2.1chステレオ再生が可能になります。
つまり、低音が内臓に響くようなボイスのAlexaちゃんと会話することも可能になります。たぶん。
新機能の紹介 　あわせて新機能もご紹介いただきました。
ただし、まだ新しい機能ということで、現状日本では※が付くものがほとんどのようです。
コンテキストキャリーオーバー 　Alexaに質問を投げかけると、質問が完全なものでなくても自動的に補完して回答してくれる機能です。</description>
    </item>
    
    <item>
      <title>勉強会[Golang入門]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_introduction_to_golang/</link>
      <pubDate>Mon, 27 Aug 2018 14:19:06 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_introduction_to_golang/</guid>
      <description>皆さんこんにちは。
パーソルプロセス&amp;amp;テクノロジーのyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
ぜひこちらもご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者は、テクテク部のビトルさんで、発表テーマは「Golang入門」でした。

 
Golang入門  ディレクトリ構成について Golangでは、開発者がコードを1つにまとめたものをworkspaceと呼びます。
 workspaceは、bin, pkg, srcの3つのディレクトリで構成されています。
binには実行可能なコマンドのバイナリファイルが配置され、
pkgには、インストールされたパッケージが配置されます。
srcは各ソースファイルやリポジトリを配置するディレクトリで、リポジトリが異なる場合はディレクトリを分けます。
Goのツールはパッケージとソースをビルドし、完成したバイナリをpkgとbinそれぞれにインストールします。

GOPATHについて GOPATHとは、自分のworkspaceのパスを指定するための環境変数です。
デフォルトでは、Unix系OSであれば$HOME\goになっており、Windowsであれば%USERPROFILE%\goになります。
デフォルトで指定されているパス以外の場所で作業を行いたい場合、GOPATHを変更する必要があります。
 
文法について Golangの基本的な文法をご紹介いただきました。
文法についてビトルさん自身は、Goのチュートリアルである A Tour of Go を参考にされたそうです。

パッケージ 外部のコードを使用したい場合、他の言語と同じように、import文でインポートします。
パッケージ名は&amp;rdquo;&amp;ldquo;で囲みますが、複数のパッケージを同時にインポートしたい場合、さらに丸括弧で囲みグループであることを示します。
標準パッケージでないものは、ビルド時にインストールされます。
 
関数 Golangで関数を定義する際は、Java等と同じように引数と返り値の両方の型を宣言します。
また、返り値を宣言する際、複数の返り値を宣言しておくことで、2つ以上の値をreturnすることができます。
さらに、返り値の変数名を定義することも可能で、関数内で変数として利用することもできます。
関数内でreturnに値を渡していなければ、変数名を定義した返り値が自動的に返されます。
 
変数・定数 変数を宣言する際は、varを使います。
変数の定義時に変数の型を宣言する必要がありますが、定義と同時に初期値を代入していれば、
初期値から自動的に型が判断されます。
関数の中ではvarの省略形として:=を使うこともできますが、関数の外ではvar, func等のキーワードで始まる宣言しか
利用できません。
定数は、constで宣言します。定数宣言の省略形はありません。
 
型 変数、定数を宣言する際に初期値を代入せずに、型宣言のみを行った場合、型によってそれぞれの初期値が
自動的に代入されます。
初期値は、
・int,float等の数字型の場合は0
・bool型の場合はfalse</description>
    </item>
    
    <item>
      <title>ITでモノづくりを変える企業を訪問</title>
      <link>https://persol-pt.github.io/posts/ss-tech-event2/</link>
      <pubDate>Mon, 27 Aug 2018 11:25:08 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/ss-tech-event2/</guid>
      <description> 
※この記事では、いつも紹介させて頂いている勉強会とは異なり、
部署全体で行われた技術系イベントについてご報告致します。
今回はITを駆使して靴作りに変革をもたらす株式会社ミリメーターさんを訪問。
ミリメーターさんのご紹介はこちら。
http://www.millimeter.jp/
アナログの世界をITで変える様子を目撃 最初に代表の粕谷氏から会社紹介をしていただきました。
足型はひとりひとり異なるため究極のOneToOneとなる点に着目し、ITを活用したビジネスを確立するに至る経緯をお話しいただきました。
地道な試行錯誤を重ね、計測機器から3Dプリンタを駆使し、それまで職人さんの手で行われていた足型の作成を実現されています。
ITを駆使しての効率化、ITの活用はもちろん、究極のOneToOne着眼点や利用者への貢献といった熱意も、そのお話から感じることができました。
  会社説明   足型計測機器は手作り 企業秘密も含まれているので詳しくは書けませんが、計測機器は普通に売っている基盤とカメラと通信機器とRaspberryPiで手作りされています。ただ、今の形に至るまでの試行錯誤も多かったとのこと。
今後のビジネス展開も考えて、コスト視点、調達視点も持ち合わせた構成に驚嘆しました。
  計測機器   3D加工ソフトとプリンタで足型を完全再現 普段お目にかかれないペン型の3Dマウスと加工ソフト。 これに行きついたのも、様々な試行錯誤があったようです。
そして、足型を成型する3Dプリンタ。いろいろなものを造形できることは知ってはいたものの、PC上のデータ通りに実際の形が再現されていく様を目の当たりにすることで、いろいろな可能性があることを実感できました。
  足型3Dプリンタ   いろいろな気づきをもらいました   懇親会   ミリメーター社の方々の熱意や取り組みに感銘を受けたのはもちろんのこと、様々な気づきをもらいました。
「ITそのものだけを考えるのではなく、利用者はもちろんのことそこにある人の手との組み合わせを考えさせれた」
「自動化が雇用を減らすのではなく、新しい価値を生み出しそこに雇用が生み出される」など。
そして、参加者それぞれが今後の自身の行動や思考に活かしたいと思った次第です。
「今出来ていない物事に対して出来る方法はないか、と考える姿勢」
「自身が担当している領域だけではなく、業界全体の知識やビジネスについて目をむけられるようになりたい」
「先を見据えた行動を踏み出して行きたい」などなど。
最後になりましたが、ご協力いただいたミリメーター社様に改めて御礼申し上げます。 </description>
    </item>
    
    <item>
      <title>勉強会[エンジニアの仕事を考える～徒然なるままに]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_engineernoshigoto/</link>
      <pubDate>Fri, 03 Aug 2018 18:30:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_engineernoshigoto/</guid>
      <description>皆さんこんにちは。
パーソルプロセス＆テクノロジー株式会社のyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者、山本さんで、テーマは「エンジニアの仕事を考える～徒然なるままに」です。
 
テーマ「エンジニアの仕事を考える～徒然なるままに」 山本さんは、Windows95が現役だったころ、Pentium ⅠないしはⅡが世の中を席巻していたころから
エンジニアとしてお仕事をされてきて、今も現役で開発業務をされています。
今回は、そんな山本さんからのエンジニアとしてのキャリアについてのアドバイス的な勉強会でした。
会社でキャリアを積む 山本さんがエンジニアとして働き始めたころ、エンジニアとしての定年は60歳でも65歳でも70歳でもなく
35歳であるという「35歳定年説」については聞いたことがなかったということです。
しかしながら、当時を振り返っても35歳を超えて現場でコーディングをしている人はおらず、
40代を超えるとマネージャーなどの偉い人ばかりだったといいます。
IT企業で出世するとなると、現場でコーディングするのをやめてマネージャーなどの管理･調整する側の
役職に就くか、エンジニアのスペシャリストとして出世するかどちらかだとおっしゃっていました。
しかし、これまで何度か転職を経験している中では、どこの会社でもスペシャリストとして出世することは
難しいと感じたそうです。
独立してキャリアを積む エンジニアが会社に留まらずにキャリアを積む方法の１つとして、会社を離れ独立するという選択肢があります。
フリーのエンジニアとしてお仕事をしていた経験のある山本さんが利点として挙げたのは、
独立すると「見た目の」収入が増えるということと、会社勤めよりも領収書が切りやすいこと、
時間を自由に使えるという点です。
週休3日、4日でのんびり仕事をすることも、毎日24時間働いてしっかり稼ぐということもできるといいます。
ですが反面、営業や経理など自分でやらなければいけないことも増え、常に仕事がなくなることや、体調を崩して働けなく
なることを考えなければいけないので、やりたいことがあって独立するのでなければ心の弱い方にはオススメできないということでした。
それよりは転職して新しい人と新しいつながりを作ったり、後述のダブルワークを試してみるほうが良いようです。
さらに、新しい技術を追うのが大変になるということもおっしゃっていました。技術を学んだがその技術が
実際には役に立たなかった、なんてことはざらにあるかと思います。フリーであればこれを自分で取捨選択しながら学習する
ことになるので、気軽に勉強できないようです。 ダブルワーク ほかにキャリアを積む（もしくは収入を増やす）手段としては、転職する、株をはじめる、仮想通貨に投資する、怪しげなアパートを経営する、俳優になる&amp;hellip;etc。
ありますが、その中でも山本さんのオススメはダブルワークです。
勤めている会社の就業規則にもよりますが、独立する前の練習として、もしくは一人で仕事をするのが
本当に自分に合っているのかを確認することができるといいます。
小さいプロジェクトを「わがままな」クライアントと自分で調整しながら仕事をしないといけないので、
技術以外のスキルやノウハウも蓄積でき、会社勤めなので収入も安定しているという利点があります。
そう聞くとなんだかいいこと尽くめな気がしてきます。
しかし、いくつか注意点もあります。
1つは、そもそも週に数日という仕事が多くはないということです。
はじめはがっつり仕事をしてクライアントと知り合いになってから、その後は週数日で続けていく。という
方法が良いというアドバイスでした。
もうひとつは、ダブルワークをする際に個人事業主登録をすると、会社を辞めた場合に失業してないじゃん！と
言われ失業保険がおりなくなるということです。
個人事業主として登録する場合は先まで考えて行う必要がありそうです。
感想 まだエンジニアとして、というよりも社会人になってから数ヶ月しか経っていない私が今回の山本さんの
発表を聞いて感じたことは、これから如何様にでも進みようがあるという可能性です。
会社を辞めたりダブルワークをしたりといったようなことは新卒数ヶ月の私にはまだまだ
想像できませんが、1つの会社に一生勤め上げるのも一つの選択肢、転職も一つの選択肢、職種を変えるのも
一つの選択肢だと考えると、怖いと感じると同時にたくさんの道が広がっているように感じました。
山本さん、ありがとうございました。</description>
    </item>
    
    <item>
      <title>勉強会[RaspberryPiとBluetoothでスマホを検知してみた]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_bluetooth/</link>
      <pubDate>Fri, 27 Jul 2018 18:30:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_bluetooth/</guid>
      <description>皆さんこんにちは。
パーソルプロセス＆テクノロジー株式会社のyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者はテクテクMGRの川崎さんです。
発表テーマは、「RaspberryPiとBluetoothでスマホを検知してみた」でした。
 
テーマ「RaspberryPiとBluetoothでスマホを検知してみた」 IoTの代名詞的な名声をほしいままにするRaspberryPi(以下ラズパイ)ですが、川崎さんはこのラズパイを使って
毎日の勤怠時間の入力を自動化したいと考えました。
弊社では毎日の勤務時間をTAManagerと呼ばれる勤怠システムに入力することになっているのですが、
毎日のことということもあり若干微妙にほんの少しわずらわしく感じることもあります。
怠慢・短気・傲慢を美徳とするエンジニアにとって、この煩わしさをそのままにして生きていくわけにはいきません。
実現方法 川崎さんは、ラズパイをオフィスの自席に置いておき、
Bluetoothで自分のスマホが接近したか離れたかを検知することで出勤・退勤時間の
打刻を行うことを考えました。
今回は勤怠入力の仕様（休み時間や一時離席はどうするか等）は後で考えるものとして、
ラズパイでスマホを検知するところまでの発表でした。

使うもの 今回Bluetoothでラズパイとスマホの距離を定期的にチェックするために使うものです。
 hcitool  raspbianで利用できる、Bluetooth機器に接続するためのツール。 機器のスキャン、強度計測、ペアリングができる。  l2ping  ネットワークレイヤ2でpingするツール。 つまりMacアドレスに対してpingする。   
仕組み Railsで定期的にペアリングされたスマホにpingを送り、接近、離脱をチェックする。
勉強会中のデモでは、あらかじめペアリングしたスマホを川崎さんが持ち会議室から離れると、
Slackにメッセージが送信されました。
 
課題 簡単にペアリングする仕組みの構築 ペアリングを行わなくてもスマホが近くにあるかないか程度のpingはできるが、
正確な距離を信号強度から測るにはペアリングが必要だそうです。
現段階ではラズパイとスマホのペアリングは手動で行うため、より簡単にペアリングできる
仕組みの構築が必要です。
勤怠の自動入力の仕様設定 今回はラズパイでスマホの接近・離脱を検知することができましたが、
勤怠システムへの自動入力となると、休み時間や一時離席などを考慮した仕組みを
作らなければいけません。
ほかに何ができそうか 最後に、川崎さんはオフィス以外でラズパイでスマホを検知して何ができそうかを
発表してくださりました。
 家に置いて子供の帰宅を通知する。 電気のオン・オフを自動で行う。 店頭に置いて特定の人の来店を店員に通知し、来店回数や購入履歴などを同期して接客対応を行う。  
以上、川崎さんの発表でした。
ラズパイは発想次第でいろいろなことに使えるので、今回のような</description>
    </item>
    
    <item>
      <title>勉強会[nissy&#39;s handy tools]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_nissy_tools/</link>
      <pubDate>Fri, 13 Jul 2018 18:30:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_nissy_tools/</guid>
      <description>皆さんこんにちは、はじめまして。
パーソルプロセス＆テクノロジー株式会社、EP統括部18年入社のyoshi-satoと申します。
今週は藤井さんに代わり私がテクテク部の勉強会の様子をお送りいたします。
よろしくお願いします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者は同じテクテク部のnissyさんです。
テーマは、nissyさんが作ったツール紹介でした。
それぞれ簡単にご紹介したいと思います。 mackerel-plugin-timeline mackerel-plugin-timelineは、Mackerelのログ表示処理を高速化するプラグインです。
ロジックとしては、ログファイルを最終行付近までシークし、
下から読み込むようになっています。
check-md5 check-md5は、Mackerel等でMD5のバイナリハッシュ値を監視するプラグインです。
このプラグインを作った理由としては、バイナリハッシュ値を
勝手に書き換える輩がいたので犯人を見つけるために作った。そうです。
あまり治安が良くなかったようです。
smtping smtpingは、SMTPサーバを監視、検証するためのツールです。
ピュアなGo言語で書かれています。
「一番がんばったのにもはや誰もテキストコンテンツに興味がない・・・」
とは、nissyさん談です。
toever toeverは、EverNoteにノートを作成、ファイルの転送を行うコマンドラインツールです。
pythonで書かれています。
GitHubでのStarの数は驚異の15。激バズです。
やはりメジャーなサービスが絡むと人の目に留まりやすいようです。
txtmsk txtmskは、標準入力に入力した文字列をaes256方式で暗号化するツールです。
もちろん、同ツールで復号することもできます。
MacOSのKeychainと連携させることもできます。
作った理由としては、前の上司がslackにパスワードを貼りまくっていたので、
注意喚起のために作ったそうです。
phck phckは、Webサーバーのプロセスをチェックするツールです。
プロセスがすべて起動していればHTTPコード200を返し、
プロセスが1つでも落ちていればHTTPコード500を返します。
taii taiiは、tailコマンドのようなコマンドです。
というよりは、tailコマンドです。
作った経緯としては、新人さんの一人がいつまでたってもtailをtaiiと
タイプしてしまうのを見かね、それならばtaiiコマンドを作ってあげよう。
という経緯だそうです。
エイリアスを設定すればいいのではないか、という声も上がりましたが、
イチから作るところにロマンがあります。
nissyさんいわく欠点として、システムコールなのでめちゃめちゃに重い
という点が挙げられるそうです。
loggerkun loggerkunは、ロガーのフォーマットを自由に変更するツールです。
仕組みとしては、テンプレートエンジンを利用して実装されています。
awslogger awsloggerは、Amazon CloudWatch Logsにログを書き出すツールです。
colle colleは、Go言語で書かれたRSSフィードリーダーです。
このcolleのすごいところは、某DMMの女性陣の画像を3秒ほどですべて取ってくることができるところだそうです。
仕組みとしては、非同期にガッと行ってガッと取ってくるロジックだそうですが、
今現在も使えるかどうかは不明です。
bon bonは、Goで書かれたWebフレームワークです。
特徴として、軽量であること、サードパーティのパッケージを利用していないことが挙げられます。
感想 今回nissyさんにご紹介いただいたツール群は、1つを除いてGoで書かれており、</description>
    </item>
    
    <item>
      <title>勉強会[RPAを学ぶ]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_rpa/</link>
      <pubDate>Mon, 25 Jun 2018 18:20:44 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_rpa/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のEP統括部、daitasuです。
今回も私たちの部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者は
私の同期であり、現在2年目、今年の3月よりテクテク部にジョインしたtodakenさん。 テーマは「RPAを学ぶ」でした。
テーマ「RPAを学ぶ」   
みなさん、RPAはご存知でしょうか？？
AIを用いたサービス等が流行する一方で、
最近AIと比較されながら業務生産性向上のためのバズワードにもなっています。
今回はそんなRPAの話でした。
RPAとは 
RPAは一定のルールに従って、間接業務を自動化するテクノロジーのことをさします。
構造化されたデータの収集やシステムへの入力など
繰り返されるオフィス業務の自動化などを得意としています。
今回、todakenさんはこのRPAについて調べ、
 どういったメリット/デメリットがあるか AIと比較されているポイント RPAの利用シーン  などをご説明いただき、実際に RPA Expressというものを用いたDEMOも行われました。
  
詳しくは、以下に記載されております。
ぜひご一読ください↓↓↓
【初心者向け】RPAを学ぶ ～RPAExpress～ 感想 todakenさんは今回RPA Expressを用いてRPA実践してみた感想として、
コーディング(いくつかあるアクションをドラッグし、組み立てていく)が楽な反面、
一処理が重くて一定の実行時間が必要になることが課題だと述べられていました。
RPAは導入のしやすさを考えると、
今後もおそらく、流行は進むのかなと思います。
ただRPA自体は人の操作をトレースして、現場のオペレーションをマクロ化する仕組みなので、
ビジネス的な収益につなげにくいのも事実なようです。
RPAは人が考えたプロセスを柔軟にマクロ化し実行していく。
AIがビックデータから新しい解を見つけ提案を行なっていく。
RPAで補えないものをシステム化していく。
というように、それぞれ違う役割を明確に分離して
どれが必要なのか、何を行うために使うのかを
考えながら導入していく必要がありそうです。
todakenさん、どうもありがとうございました。</description>
    </item>
    
    <item>
      <title>勉強会[gRPC]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_grcp/</link>
      <pubDate>Mon, 11 Jun 2018 13:53:08 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_grcp/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のEP統括部、daitasuです。
今回も私たちの部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者はvitorさん。テーマは「gRPC」です。
テーマ「gRPC」   
本日の勉強会は、gRPCという2015年にGoogleが開発した
RPCフレームワークについてのお話しでした。
gRPCとは 
gRPCというのは、RPC(リモートプロシージャコール)を実現するために開発されたプロトコルの一つです。
リモートプロシージャコールというのは、ネットワークに接続された他のサーバからプログラムを呼び出し、
実行させるための手法やプロトコルのことを言います。
例えば、あるサーバから別サーバ(別PC)に存在するアプリ内のJavaコードを実行させる等 gRPCは、このRPCを実現するために2015年にGoogle社によって開発されました。
gRPCを用いることで、以下のようなことが可能になるそうです。
  
gRPCはProtocol Buffersというフォーマットを用いてデータをシリアライズ化して書かれています。

Protocol Buffers 
プロトコルバッファーとは、IDL(インタフェース定義言語)で構造を定義し、
データをシリアライズ化するフォーマットで、データ通信・永続化を目的としています。
データをシリアライズ化することで、データサイズの縮小・高速送信に繋が流そうです。
仕組み 
gRPCでは、IDL(インターフェース定義言語)を用いてあらかじめAPI仕様を .protoファイルとして定義します。
言語に依存しないIDLを利用して、先にインターフェースを定義することで、多種のプログラミング言語で書かれた
サーバ間の通信を可能にしています。
以下の図の例だとサーバサイドをC++で開発しており、クライアントをRubyやAndroid-Javaで書いてあります。
参考サイト：What is gRPC?
  
protoファイルの定義 
protoファイルでのgRPCの設定の例も取り上げていました。
下記のようにリクエストやレスポンスの定義を行います。
このように指定することでデータ構造をシリアル化し、様々な言語での取り出しを可能にしています。
// The greeter service definition. service Greeter { // Sends a greeting rpc SayHello (HelloRequest) returns (HelloReply) {} } // The request message containing the user&#39;s name.</description>
    </item>
    
    <item>
      <title>勉強会[物体検出アルゴリズム YOLO]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180420/</link>
      <pubDate>Wed, 09 May 2018 14:49:20 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180420/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のEP統括部、daitasuです。
今週も私たちの部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者は私の直属のMGRであります、川崎さんのプレゼンです。
テーマは「YOLOってみた」です。
テーマ「YOLOってみた」   
みなさん、YOLOってご存知でしょうか？
私は今回初めて知ったのですが、YOLOというのは、
&amp;lsquo;You only look once&amp;rsquo;、
リアルタイムに画像認識を行い、物体を検出するアルゴリズムを指します。
川崎さんは、今回自宅の動画を撮影し、このYOLOを利用して、
物体検出がどのくらいの制度か、どのくらいの変換速度なのかを検証したお話を
してくださいました。
そもそもYOLOってどんなもの？ 
  
上記のように、YOLOはDarknetというフレームワークを用いて
画像/動画からオブジェクトを検出しています。
そして、そのオブジェクトが何なのか(人なのか、車なのか、植物なのか等)を
判断し、分類をリアルタイムに行っています。
実際の画像を見てみましょう！
  
「Person」と「laptop」が検出されていますね。
このように、画像/動画から物体検出し、分類した結果を枠で囲い伝えてくれます。
川崎さんが撮影した自宅の動画では、人や植物、机、TVなど
想像以上に細かに分類がなされていました。
以下のサイトなどを見て頂けると、
YOLOの面白さが伝わるのではないかと思います。
YOLO動画 検証環境 
  検証した環境     用意するもの   
YOLOはCPU単体だと非常に動きが悪くなるようで、GPUを積んだマシンで行う必要があります
今回の検証では、CPU単体での処理と、
GPUを利用した場合の2種類のプログラムで検証しています。
検証結果   検証結果   CPU単体だと速度が全く出ず、
動画でもすごく遅いGIF画像を見ているような動きになっていました。</description>
    </item>
    
    <item>
      <title>勉強会[GOのパフォーマンスチューニング]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180406/</link>
      <pubDate>Thu, 26 Apr 2018 10:50:30 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180406/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のEP統括部、daitasuです。
今週も私たちの部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者はGoをこよなく愛するnissyさん。
テーマは「GOのパフォーマンスチューニング」です。
テーマ「GOのパフォーマンスチューニング」   
今回はGOのオープンソースに定期的に貢献しているnissyさんが、
「Goのイケてるコードを見せてくれ！」と言われて作成した
Go言語がいかに素晴らしいかを語るGoのパフォーマンスチューニングの話でした。
私はまだプログラミング歴2年目でGoもCも触ったことがないため、
メモリ管理などはあまり詳しいことは分からないのですが、
分かった範囲で調べて掘り下げてみました。
slice/array 
  slice/array   
ここでは、Go言語のarrayとsliceの違い、それぞれの書き方での
パフォーマンスの差を比較していました。
Go言語のSliceはほかの言語のArrayに似ているけれど、少し違う部分があるようですね。
Array型は配列の長さを作成時に指定しますが、Sliceでは要素の型のみを記載し、
長さの記載はしません。
そのため、上記のようにfor文で繰り返していくと、
 slice ・・・ その都度新しくメモリを確保していく
 array ・・・ 必要分のメモリを先に確保し、そこに文字を入れていく
  
といった動きになります。
そのため、arrayの方が処理速度は速くなりますが、
要素数を指定しないといけないので、使いどころが難しく、
柔軟性ではsliceが長けている、といった感じですかね。
このあたりにslice/arrayの違いは書かれていたので、そこからも学んでみました。
参考サイト match 
  match   
こちらは正規表現の話です。
Go言語の正規表現はThompson NFA と呼ばれる実装をしているそうです。
NFA？とは？？と社会人2年目の私はまだまだ勉強不足のためこちらも調べました。
NFAとは&amp;rdquo;非決定性有限オートマトン&amp;rdquo;とのことです。
さらに難しくなりました。
有限オートマトンというのは、あるインプットがあった際に、
その真偽値を出す機会です。</description>
    </item>
    
    <item>
      <title>勉強会[Anacondaでのデータ前処理]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180329/</link>
      <pubDate>Fri, 06 Apr 2018 14:11:16 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180329/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のEP統括部、daitasuです。
今週も私たちの部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者はデータ分析案件に携わっている桑田さん。
テーマは「Anacondaでのデータ前処理」でした。
2018年3月15日の勉強会　 テーマ「Anacondaでのデータ前処理」   
桑田さんは現在データ分析関連の業務に携わっており、
大学時代から研究で機械学習を使ったテーマに関わっていたそうです。
そんな桑田さんですが、今週は自身の現在の分析環境の紹介、
特にAnacondaを用いた機械学習実行環境の準備からデータ前処理を行うまでをご説明頂きました。
Anacondaとは 
Anaconda はデータサイエンス向けに作成された Pythonパッケージで、
科学技術計算などを中心とした数多くのモジュールやツールが独自の形式で同梱されているもの。
機械学習屋さんが取り扱う基本的なものは一通り揃っているようです。
  Anaconda全体像     よく出てくるデータ解析ライブラリ   
Anacondaを用いることで、通常はPythonのインストール後に行う必要なライブラリの追加を省くことができます。
一方で、従来のPython環境が隠ぺいされるために独自の環境を利用するためには、
諸々の設定を行わないといけない点もあるため、メリット/デメリットを踏まえたうえで使う必要がありそうです。
今回の話では、Anacondaを使ったデータ前処理の方法として、
その中のライブラリ、PandasとJupyterLabを使ったやり方をご説明頂きました。
Pandasとは 
* 数値計算ライブラリ(NumPy) * 数値解析ライブラリ(SciPy) * グラフ描画ライブラリ(matplotlib)

を含むデータ解析支援ライブラリ。 データフレームオブジェクトという物を使って、データ操作のための効率的な演算を提供しており、
テーブルデータや時系列データ解析などを得意としているようです。
Jupyterシリーズとは 
Jupyterシリーズ(JupyterLabやJupyter Notebook)は、
プログラムのコードを含んだドキュメントを作成できる、OSSのウェブアプリケーションです。
スクリプトをファイル単位ではなくセル単位で記述することができ、
一緒にマークダウンも書くことができるため、
内容説明 + コード + 結果がまとめて書くことができるのが使い勝手が良いため、
利用しているデータサイエンティストは多いんだとか。</description>
    </item>
    
    <item>
      <title>勉強会[Kubernetesを使ってmicroserviceっぽいものを作ってみた]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180315/</link>
      <pubDate>Tue, 03 Apr 2018 17:00:45 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180315/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今週も私たちの部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
こちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者はKotlin愛好家の宍戸さん。
テーマは「Kubernetesを使ってmicroserviceっぽいものを作ってみた」でした。
2018年3月15日の勉強会　 テーマ「Kubernetesを使ってmicroserviceっぽいものを作ってみた」   
宍戸さんはKotlinに魅了され、
Kotlinで個人開発したり、業務でもKotlinを使ったりと
Kotlinライフを送っています。
そんな宍戸さんですが、
今週はKubernetesでmicroserviceを作ったそうで、
Kubernetesの概要と実際に作成したもののDEMOを発表して頂きました。
Kubernetesとは 
Kubernetesはクーバネティス、クーベネティス、クーバネイティス、クバネティスなどと呼ばれ、
人によって読み方はまちまちです。
略称としては「k8s」と呼ばれており、Goで作られています。
元々はGoogleが開発していたそうな。
では実際にどんなことができるものなのでしょうか？
KubernetesはDockerコンテナ群のオーケストレーションツールで、
Dockerコンテナをいい感じに管理してくれるツールだそうです。
 アプリのデプロイ 稼働中にアプリをスケーリング 新機能をシームレスに追加 自動修復  などができ、コンテナ群の運用自動化を目的として設計されたものです。

Kubernetesのアーキテクチャ   Kubernetesのアーキテクチャには、
 マスタ・コンポーネント ノード・コンポーネント  というものがあるそうです。
マスタ・コンポーネント スケジューリングやイベントの検知などクラスタ全体の制御や管理を受け持つもの。
構成要素は以下のようになっています。
 API Server
クラスタ制御のフロント・エンド。RESTful APIを提供。
 Scheduler
Podの展開を制御。
 Controller
クラスタ内のタスクを処理するバックグラウンド
 etcd
クラスタデータの保存</description>
    </item>
    
    <item>
      <title>勉強会[Learning Elm in JS]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180322/</link>
      <pubDate>Tue, 27 Mar 2018 17:21:16 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180322/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今週も私たちの部の勉強会の様子をお送りいたします。
※技術的なブログについては現在Qiitaの方に移行致しました。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者は現在1週間でLT発表4回という
講演家のようなライフに挑戦中のboiyaaさん。
テーマは「Learning Elm in JS」でした。
2018年3月22日の勉強会　 テーマ「Learning Elm in JS」   
boiyaaさんは、昨年関数型言語であるElmの魅力にはまり、
今では色々なコミュニティで、フロントエンドについての話題を中心に、
Elmについてもよく発表を行っています。

Elmとは 
静的かつ強力な型検査によって、 鉄壁のように実行時例外を起こさないことが強みの関数型言語です。
ElmはHaskellをベースとして作られており、
状態や変数はありません。全ては関数によってできています。

さて、関数型言語といわれると、なじみのない人からすると
体が拒否反応を示します。
私も以前boiyaaさんに誘われてElmハンズオンに参加したことがあるのですが、
何が起きているか分からず思考が停止しました。
しかし今回、そんなElmになじみのない人に向けて、
Elmは何がいいのか、他のAltJSと何が違うのか
素のjavascriptと同じコードをElmで書いて比較することで
その良し悪しを分かりやすく伝えてくれました。
こちらがそのスライドになります。
Learning Elm in JS 

JSでのぼこぼこ続出する実行時例外達が「事実上、一切起こらない」というのは
非常にありがたいですね。
この堅牢性は学習の価値あり！
皆さんもスライドを読んで教務が湧いたら、ぜひぜひElmを使ってみてください。</description>
    </item>
    
    <item>
      <title>勉強会[IoTビジネス]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180308/</link>
      <pubDate>Tue, 27 Mar 2018 16:04:48 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180308/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今週も私たちの部の勉強会の様子をお送りいたします。
※技術的なブログについては現在Qiitaの方に移行致しました。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者は志田さん。
テーマは「IoTビジネス」でした。
2018年3月8日の勉強会　 テーマ「IoTビジネス」 
最近、玄関の鍵の遠隔ロック、エアコンや照明の自動コントロールや音声操作など
家のスマート化などが話題になっています。
こういったモノに搭載された内蔵センサーからデータを集積、
アクションを自動で起こすモノたちのことをIoT(Internet of Things)と呼んでいます。
今回はそんなIoTの現在と将来の市場規模について、
どんなビジネス利用の可能性があるのかについて調べたことを伝えて頂きました。
実現できること 
「IoT(モノのインターネット)」で実現できることを簡単にまとめると、
以下のようになります。
 離れたモノの状態や位置を探る 環境を知る(環境モニタリング) モノの動きを知る(モーションモニター) モノの位置を知る(存在検知、近接検知、通過検知) 離れたモノを操作する  上記のような検知によって、人がいなくてもアクションを起こすことが可能になります。(自動化)

仕組みは、以下のようになっています
  市場規模 市場規模としては2016年時点で1.4兆ドル、デバイス数64億個であり、
2020年には市場規模3兆ドル、デバイス数208億個が見込まれているそうです。
注目が始まった背景 注目が始まった背景には、いくつかの理由があるそうです。
 必要な機器/内蔵チップなどの性能が格段に向上、小型化された 既存の通信市場が成熟し、飽和したため、モノの数だけある新しい市場としてとして魅力的になった 社会インフラの老朽化や人の高齢化。センサーで点検や修繕を効率化し、人件費削減  
IoT発展のカギ 今回のお話では、IoTが発展するにはいくつかのキーワードが重要になるとのことでした。
 高速/大容量 低地円 多数同時接続 長距離通信 長寿命バッテリー  
これらのことから、現在IoT時代に向けた通信規格として
超高速、超多数同時接続の「5G」が着目されているそうです。
当然ネットにつなげることが最低条件なので、「LPWA（Low Power, Wide Area）」
も重要になりますね。

IoTの種類 IoTには、大きく分けて2種類の型があるそうです。</description>
    </item>
    
    <item>
      <title>勉強会[スマートスピーカー]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180301/</link>
      <pubDate>Tue, 20 Mar 2018 15:25:44 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180301/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今週も私たちの部の勉強会の様子をお送りいたします。
※技術的なブログについては現在Qiitaの方に移行致しました。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者は最近届いたAmazon Alexaのピカチュウスキルで
毎日ピカチュウと会話をしている千葉さん。
テーマは 「スマートスピーカー」 でした。
2018年3月1日の勉強会　 テーマ「スマートスピーカー」 
スマートスピーカーと言えば、様々ありますね。
Google HOME、Amazon Echo、LINE clovaなどなど。
どれかしらお持ちの方もいらっしゃるのではないかと思います。
今週はそんなスマートスピーカーの概要と
実際にラズパイを使って作ってみたskillのお話でした。
概要 
  スマートスピーカー市場   
スマートスピーカーは皆さんCM等で見られることも多いので、
だいたいご存知かと思いますが、改めて見ていきましょう。
スマートスピーカーとは、AIアシスタントを搭載した、
対話型で音声操作を行えるスピーカーです。
音楽環境や天気予報などのネット検索など、今までPCやスマホから検索を
行っていたものをスピーカーに呼びかけるだけで「音声」で情報を返してくれる代物になります。
使い方は人によって様々ですが、以下にいくつかの利用法を並べてみます。
 目覚ましとしてアラームセット 天気予報の検索 他のIoT機器との連動で家電制御 ニュースの検索 リマインダー  
やはり今までスマホやPCから行っていたことを
「音声」でできるようになったのがポイント見たいですね。
現在需要として一番多いのは、Amazon Alexaだそうです。
ラズパイで作ってみた 
千葉さんはスマートスピーカーのAmazon ehoを
招待メール申請したそうなのですが、なかなか届かないため一度自分で簡易なものを
作ってみることにしたそうです。
必要なもの
 ラズパイ一式(無線LANのついているモデル) スピーカー マイク Alexa Voice Service(無償提供)</description>
    </item>
    
    <item>
      <title>第1回 新卒勉強会「チャットボットハンズオン」</title>
      <link>https://persol-pt.github.io/posts/young-worker-meetsup01/</link>
      <pubDate>Fri, 09 Mar 2018 11:39:16 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/young-worker-meetsup01/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今回はいつもと変わり、パーソルプロセスアンドテクノロジーにおける
2017年度入社の新卒で開催された新卒勉強会の様子を報告します！
※技術的なブログについては現在Qiitaの方に移行致しました。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
  
私が様々な外部の勉強会に参加させて頂く中で、
感じていたことがありました。
それは「発表しあうって面白い！」ということです。
まだ恐れ多く、これといった登壇をしたわけではないのですが、
外部の勉強会を見ていると、様々なメリットがあるように感じました。
私が感じた勉強会に参加する面白さは以下の通りです。
勉強会に参加する面白さ
 自分の知らない分野に触れることで技術幅が広がる 新しい分野に関心を持てる 発表側であれば、発信の機会として大きく成長できる まわりの人々がどんなことに関心を持っているか分かる 発信の機会や学びあう仲間がいることは学びのモチベーションになる  実は弊社では各部でおのおのに行っている勉強会は別途あります。
しかし、部を横断しての個人的な取り組みや若手だけに絞った勉強会は
あまりなかったため、
今回、新卒から学びあって自学のモチベーションを上げていこう！
と開催することが決まりました。

身近な新卒同士で互いの技術を教えあえるって
部活みたいで楽しいですからね。

この新卒勉強会は2/24(土)に行われました。
内容は、「チャットボットハンズオン」!
せっかくのしっかり時間を取った勉強会なので、
ハンズオン形式で「知らないことをできるようになろう！」
という点が中心的なテーマになっています。
第1回 17年度新卒勉強会「チャットボットハンズオン」   今回の勉強会では、SSOL新卒46名中14名が参加しました。
ハンズオンの具体的な内容は、
「Node.jsを用いたLINE Botの作成」です

時間は3時間程度と短めで、
ほとんどがNodeは初めてというメンバーだったので、
今回はNode.jsやnpmの説明から始め、
LINE Botのおうむ返しができるようになるまでを行いました。
  実際につくったBotの一例   ほとんどLINE公式のNode.js SDKのサンプルコードそのままですが、
こちらに実際に使ったコードを置いています。
利用したサンプル

Bot作成は作ったものが目に見えやすいことや
使い勝手がいいこともあり、みんな楽しんで作成にあたっていました。
結果、3時間という短い時間ではあったものの、
半数以上がBotの作成に成功しました!</description>
    </item>
    
    <item>
      <title>勉強会[ReactとRedux]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180222/</link>
      <pubDate>Thu, 08 Mar 2018 11:40:24 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180222/</guid>
      <description>みなさんこんにちは、
パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今回も毎週の勉強会の様子を発信していきます！
※技術的なブログについては現在Qiitaの方に移行致しました。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
さて、今週の発表者は萩原さん。
テーマは 「ReactとRedux」 でした。
2018年2月22日の勉強会　 テーマ「ReactとRedux」 
  以前の勉強会では、Vue.jsとAngular、Reactの比較が行われましたが、
今回萩原さんが説明したのは、ReactにおけるReduxの話でした。
React.js 
  
そもそもReactとは何かのおさらいです。
ReactはJavascriptのライブラリであり、
JSX形式でJS内にHTMLタグを埋め込むような形で書いていきます。
通常のJSですと、HTMLの中にJavascriptを書いていきますよね？
あくまでもメインがHTMLであった今までの文化から、
JSにより重要性を持たせてきた近代。
JSが主体となるという点で個人的にはReactはなにかと近代感を感じます。
また、component思考やstateによる状態管理も他とは思想が違う部分です。
さて、Reactの話が上がるとよく出てくるものとして、
 Redux webpack babel npm/yarn  
などが上がるかと思います。
今回はReduxにフォーカスを当てたお話でした。
FluxとRedux 
Reduxとは？
Reactが扱うstateを一元管理するためのフレームワークです。
ReduxはFluxというデザインパターンの思想を引き継いでいます。
Fluxとは？
facebookが提唱したアーキテクチャです。
 Action　View等から発火されるイベント。 Dispatcher　アクションを受けて、全てのstoreに対しアクションを受け渡す。 Store　アプリケーションのデータ。アクションによってのみデータ更新される。 View　storeのデータをもとに表示するコンポーネント。  という4つのパートから組み立てられています。
Flux参考
特徴
 データの流れが一方通行 全てのデータのオペレーションがDispatcherに集約される</description>
    </item>
    
    <item>
      <title>勉強会[コインチェック事件について]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180215/</link>
      <pubDate>Tue, 27 Feb 2018 17:39:29 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180215/</guid>
      <description>みなさんこんにちは、パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今回も毎週の勉強会の様子を発信していきます！
※技術的なブログについては現在Qiitaの方に移行致しました。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー

さて、今週の発表者はテクテクチームの生みの親ともいえる関根さん。
テーマは 「コインチェック事件を調べる」 でした。
2018年2月15日の勉強会　 テーマ「コインチェック事件を調べる」 
  
2018年、年明け早々から世間を賑わせたこの話題、
皆さんもニュース等で一度は見たことがあるかと思います。
今回のお話では、
関根さんがコインチェック事件の勘所を調べて共有して頂きました。
コインチェック事件の成り行き 
  
上記にコインチェック事件が起こってから最近までの
事件の流れがまとめられています。
何百億という莫大な補償が本当に可能かどうかは定かではありませんが、
額といい規模といい、前代未聞のハッキング事件といっていいでしょう。
今回のお話では、特に今回の事件に関しての
セキュリティ面の話が中心でした。
 
中心となるのは、以下の二つの点。
 コールドウォレットではなく、ホットウォレットで管理 マルチシグではなく、シングルシグで管理  
コールドウォレットとホットウォレット 
ホットウォレット
ホットウォレットというのは、常時ネットワークに接続された環境にあるウォレットのことです。
コールドウォレット
一方、コールドウォレットというのは、秘密鍵をオフラインで管理するタイプの仮想通貨ウォレットです。
鍵を物理的なもの(ペーパーウォレット等)にしておくことや、特殊なハードウェアでのみ分かるようにしておく
といった鍵の管理方式になります。
コールドウォレットにして、鍵を紙などに物理的に管理しておけば、
確かにハッカーからWEB上から盗まれる心配はありませんね。
シングルシグとマルチシグ もう一つの重要な点は、シングルシグとマルチシグです。
ビットコインなど、仮想通貨の送付には「公開鍵暗号方式」が用いられており、
公開鍵と秘密鍵がセットになっていないと情報の取得ができないようになっています。
シングルシグとマルチシグはその公開鍵暗号方式の管理方法の種類です。
シングルシグ
公開鍵=1、秘密鍵=1で管理しています。
マルチシグ
鍵を開けるために複数の秘密鍵が必要になります。
マルチシグの一例：(2 of 3)
この方式では、3つの秘密鍵が存在し、そのうち2つの鍵を用いて複合します。
マルチシグで管理し、鍵を別々に保管しておけばより強固なセキュリティを
実現できるというわけですね。
各取引所のセキュリティ比較</description>
    </item>
    
    <item>
      <title>勉強会[GraphQL入門]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180208/</link>
      <pubDate>Sat, 10 Feb 2018 11:37:32 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180208/</guid>
      <description>みなさんこんにちは、パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今回も毎週の勉強会の様子を発信していきます！
また、技術的なブログについては現在Qiitaの方に移行しております。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー

さて、今週の発表者はサーバエンジニアであるビトルさん。
テーマは 「GraphQL入門」 でした。
2018年2月8日の勉強会　 テーマ「GraphQL入門」 
  
今回のお話では、ここ数年話題に上がっていたFacebookによって開発された
クエリ言語、「GraphQL」をご紹介いただきました。
GraphQLはよくRESTfulと比較されることが良くありますが、
そういった話も織り交ぜながら、今回は実際にビトルさんが触ってみて感じたこと、
利点や課題点についての説明でした。
GraphQLの特徴  APIの定義にあたるのがSchema クエリ言語なので対象のDBなどのデータストレージは何でもいい バージョンレスAPI 多数のプログラミング言語で利用できる  特徴としては、上記のようなお話がありました。
ここからは実際の処理を見ていきます。
GraphQLの処理 
  
GraphQLでは上記のようにSchemaを定義していきます。
例では、Shopというオブジェクト型を定義し、
idとnameフィールドを定義しています。
GraphQLはこのように、Schemaの存在と問い合わせ言語仕様がセットになっており、
型システムに基づいたAPIの構築ができます。
上記の例のように、ID型は一意性を保証します。
また、Not Nullは!で示すそうです。
次に、検索クエリです。
こちらはSchemaの中にQuery型として定義するそうです。
は以下のように示すそうです。
schema { type shop{ id: ID! name: String! } type Query { shops: [Shop]! shop(name: String): Shop } }  このように引数付きのフィールドを定義することで、</description>
    </item>
    
    <item>
      <title>勉強会[Web RTC コトハジメ]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180131/</link>
      <pubDate>Wed, 31 Jan 2018 13:38:55 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180131/</guid>
      <description> 
みなさんこんにちは、パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今週も私たち、テクテクチームの毎週の勉強会の様子を発信していきます！
技術的なブログについては現在QiitaのOrganizationに移行しております。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー

さて、今週の発表者は毎週このブログをお届けしております、私、藤井 大祐(daitasu)です。
テーマは 「WebRTCコトハジメ」 。
Web RTCを始めるにあたっての基礎知識・導入を発表しました。 2018年1月22日の勉強会　 テーマ「Web RTC コトハジメ」 
  
本発表では、Web RTCの基本的な内容について、
実際にP2P通信を行うまでについての説明と実際のDEMOを行いました。
 Web RTC DEMO   今回の内容に関してはQiitaの方に記載しております。
よろしければそちらをご覧ください。
WebRTCの基本とP2P通信が成立するまでを学ぶ(Qiita)
また、この発表ではWeb RTCの仕組みの説明がメインになってしまったのですが、
今度はそれを使ってちょっとしたアプリを作ろうと思っています。
 次回作成したいもの   
それでは、また来週お会いしましょう！ </description>
    </item>
    
    <item>
      <title>勉強会[年末年始の購入品と個人開発したアプリ]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180119/</link>
      <pubDate>Fri, 26 Jan 2018 12:06:17 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180119/</guid>
      <description>みなさんこんにちは、パーソルプロセスアンドテクノロジー株式会社のAS統括部、daitasuです。
今週もこの場で毎週の勉強会の様子を発信していきます！
また、再掲になりますが、技術的なブログについては今後Qiitaの方に移行することになりました。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー

さて、今週の発表者は定期的に個人開発をしていらっしゃるN.yamamotoさん。
テーマは 「年末年始で買ったものと最近の個人開発アプリについて」 でした。
2018年1月22日の勉強会　 テーマ「年末年始で買ったものと最近の個人開発アプリについて」 
  
最近スマートスピーカーが話題となり、Google Home、Amazon Echo、LINE Clovaなど
色んな製品が話題に上がっています。
今回は最近いろんなガジェットを購入し試しているN.yamamotoさんが
最近買ったものの紹介と、その活用法などをご紹介してくださりました。
N.yamamotoさんが最近買ったものは
 Apple Watch3(GPS)
 Kindle Fire HD 10タブレット Amazon Echo スマートリモコン  
N.yamamotoさんの家は今までApple製品に覆われていたそうですが、
最近はAmazon製品に家野中が浸食されつつあるそうです。
APP WATCH3(GPS) 
ランニングが趣味のN.yamamotoさんは
月によっては100km近く、アスリートばりに走っています。
そんなランニング好きにおすすめのAPPLE WATCH3。
NIKE + RunClub というアプリを使って走っているそうです。
こちらは1kmごとに平均タイムを記録してくれ、
信号で止まるとワークアウトを中断してくれるという優れもの。
腕時計なら邪魔にもならず、Bluetoothヘッドフォンもあれば、
音楽を聴きつつ優雅に走れます。
ランニングが趣味の方はぜひぜひ購入を検討してみてくださいね。
KINDLE FIRE HD 10 タブレット 
  
なんとこちらのタブレット、Amazonプライムで19,000円というお得価格から</description>
    </item>
    
    <item>
      <title>勉強会[最近のJavascriptフレームワーク選定]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop20180110/</link>
      <pubDate>Fri, 12 Jan 2018 17:38:09 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop20180110/</guid>
      <description>あけましておめでとうございます!!
本年もどうぞよろしくお願い致します。

  
今年も毎週の勉強会の様子や会社の取り組みなどをこちらのブログで発信していきます。
お時間がある際にぜひのぞいてみてください。
また、技術的なブログについては今後Qiitaの方に移行することになりました。
テクテクチームのメンバーが各々に書き進めていますのでこちらもぜひご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー

今週の発表者は川崎さん。
テーマは 「最近のJavascriptフレームワーク選定について」 でした。
2018年1月22日の勉強会　テーマ「最近のJavascriptフレームワーク選定」 
  
Javascriptフレームワークといえば、その流行の移り変わりが早いことで有名ですが、
今回はそんなフロントエンドのフレームワーク選定で何を選んだらよいのか、
人気のReact、Angular、Vue.jsの3つの比較を紹介くださりました。
  

今回のお話では、技術選定時に意識することとして以下のような点を述べられていました。
 どんなものを作るのか
 出来上がるコードの品質
・可読性
・拡張性
 開発体制
・開発期間
・開発・運用人数
・採用・新メンバーの参入障壁
 公式ドキュメントの充実度
  
結論
 
それぞれのフレームワークで向いているシステムは以下のようにまとめられます。

  
AngularはReactやVue.jsとは異なり、開発に必要な機能をひとしきり揃えているため、
自分でそろえる負担が少ない一方、自由度は下がる印象です。
逆にReactは基本的にViewを作成するためのライブラリなので、
自身でほかのライブラリと組み合わせていく必要がありますが自由度は高めでUI作成は得意です。
またReactはJSXで書かれるというのも特徴ですね。
学習コストとしてはAngularが一番高く、React、VueJSの順に下がっていくようです。
ReactやVueJSは自身でライブラリを追加していかなければなりませんが、
CLIもあるのでそういった負担の差は最近だいぶ減ってきているみたいですね。
いずれにしても、合う合わないはいろんな観点から考える必要がありそうなので、
ある程度触れてみてからの検証が必要そうです。
まだまだフロントエンド界隈は終わりなき戦いが続くのでしょうか?
日々流行にアンテナを張り続けていかなければなりませんね。
それでは、今週はここまで。</description>
    </item>
    
    <item>
      <title>勉強会[http request multiplexerと文字列マッチング]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop1222/</link>
      <pubDate>Fri, 29 Dec 2017 23:58:18 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop1222/</guid>
      <description>皆さんこんにちは、新卒の藤井大祐(daitasu)です。

今週も私たちパーソルプロセスアンドテクノロジーのテクテクチームが
行っている技術勉強会のレポートをしていきたいと思います。
今年の勉強会ブログはこれで最後になります。
今週の発表者は定期的に自身でパッケージを作成し、OSSに貢献しているnissyさん。
テーマは 「http request multiplexer と文字列マッチング」 でした。
12月22日の勉強会　テーマ「http request multiplexer と文字列マッチング」 
  
通常URLにリクエストする際、そのURL文字列にマッチするパターンを
登録されているパターンの中から検索し、呼び出されるハンドラを決めようとします。
このルーティング処理はその言語やフレームワークでの処理方法によって
大きく処理速度が異なります。
今回nissyさんは基数木(パトリシア木)という集合データ構造を用いて
Go言語でルーティング処理を行うパッケージを作成しました。
Bon(https://github.com/nissy/bon)

今回のお話では、
基本的なマッチングパターンのルールから
トライ木(Trie)による複数パターンマッチング や KMP といった
代表的な文字列パターンマッチングのアルゴリズム紹介
に始まり、

いくつかの代表的なアルゴリズムの速度比較を行いまいした。
以下はパトリシア木(Patricia Trie)の構造紹介とその速度表です。

Patricia Trie(https://github.com/nissy/mux/tree/patricia)

  Patricia Trieの構造     Patricia Trie 速度   
そしてその後、実際に自身がPatricia Trieをもとにチューニングし、
Go言語で作成したルーティング手法のパッケージ「 Bon 」についての紹介を行い、
他のGo言語フレームワークとの速度比較を行いました。

  Bon 比較     BonとGo言語フレームワークの速度比較</description>
    </item>
    
    <item>
      <title>勉強会[YUBIKEYを用いた二要素認証]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop1215/</link>
      <pubDate>Fri, 22 Dec 2017 02:48:09 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop1215/</guid>
      <description>皆さんこんにちは、新卒の藤井大祐(daitasu)です。
今週も私たちストラテジーサービス部テクノロジーサービスグループテクノロジーサービスチーム(通称テクテク)が
行っている技術勉強会のレポートをしていきたいと思います。

今週のテーマは 「YUBIKEYを用いた二要素認証」 です。
12月15日の勉強会　テーマ「YUBIKEYを用いた二要素認証」 
  
近年、セキュリティがより重視されるようになり、
二要素認証という言葉を聞くことが増えてきました。

一般的には、認証というと
 「ID」 + 「パスワード」
という、IDに対応した1要素での認証が標準です。
しかし、これに＋して、
  ・本人の生体情報 (顔認証、指紋認証、網膜スキャン等)
・本人だけが所有するもの (スマホやPCなどのハードウェアトークン、メールで届くワンタイムパスワード)
などを用いてもう一つ認証を増やすのが2要素認証になります。
今週の発表では、上記の 本人が所有するもの として YUBIKEY という
認証デバイスを用いた二要素認証の説明がありました。
 YUBIKEYの機能一覧   
こちらはPCに直接差して、デバイスの真ん中にあるボタンを押すだけで
二要素認証ができるというシンプルな仕組みになっています。
YUBIKEYには多くの機能が含まれているのですが、
今回は、 Yubico OTP 、 FIDO U2F に焦点を当てたお話でした。
この記事ではFIDOの内容に少しだけ触れていきたいと思います。
FIDO U2F(Fast Identity Online Universal 2nd Factor) 
この機能は自前のサービス、及びGoogle、Facebook、Dropbox、Github、GitLabなどの
各種WEBサービスにおいて、
U2Fデバイスを登録し、チャレンジレスポンス認証を利用可能にします。
チャレンジレスポンス方式の認証というのは、「認証される側」と「認証する側」の間のやり取りを
 「認証をする側」が「認証される側」に チャレンジ（ランダムな数字） を発行
 「認証される側」は チャレンジを秘密の鍵 で署名</description>
    </item>
    
    <item>
      <title>We Are JavaScripters!で弟のふんどしで相撲をとってきました</title>
      <link>https://persol-pt.github.io/posts/wejs14/</link>
      <pubDate>Thu, 21 Dec 2017 23:59:59 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/wejs14/</guid>
      <description>JavaScript Advent Calendar 2017 21 日目の記事です。

本日はWe Are JavaScripters! @14th【初心者歓迎 LT 大会】で LT してきました。
私の大好きなコミュニティで、よく参加させていただいてます。

私のチームでは React, Flow, Jest など、Facebook 製品をよく使っておりますので Facebook のフロントエンド開発スタイルについて発表してきました。

  ご覧いただいてわかったと思いますが、
今回、ただ弟の知識だけを書いたあげく、最終的に弟を前に出してインタビューするだけという非常にエコな資料を作りまして、

「お前いらなかったじゃねーかよ！」「弟の肩にのっかりすぎだろ！」「帰れ！」など、とても反響が大きく、

私はとても気持ちがよかったです。

ちなみに Facebook には訪問した方々が落書きをする THE FACEBOOK WALL がありますが、
私も先日に遊びに行ったとき落書きさせてもらいました。どこかわかりますか？（どうでもいいですよね）
 左下でした！
 会社名ではなく、自分の名前を書く、自分中心の男、それが私です。
ちなみにシアトルの風景画は別の方が描いた絵ですが、おかげさまでただの YAMAMOTO がオシャレな YAMAMOTO になりました。

WeJS の他の方の資料はもっと魅力的ですので、ぜひご覧ください
   jquery? state管理? どっち使えばいいの？ 20171221 we are_javascripters@14th  from 将一 深見</description>
    </item>
    
    <item>
      <title>勉強会[フロントエンドにおけるIaCとCI]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop1206/</link>
      <pubDate>Fri, 08 Dec 2017 18:48:09 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop1206/</guid>
      <description>皆さんこんにちは、2017年入社の藤井です。
今回のブログでは弊社の私たちストラテジーサービス部テクノロジーサービスグループテクノロジーサービスチーム(通称テクテク)が
毎週行っている技術勉強会について新人目線で触れていきたいと思います。

テクテクでは毎週水曜日に技術勉強会を行っています。
この勉強会では、それぞれ自分が学びたいテーマを宣言し、1人ずつリレー形式で発表を行っています。
テクテクは現在13名のため、2か月に1回のペースで自分の発表が回ってくるイメージですね。

テーマはサーバーレスアーキテクチャ、機械学習、ブロックチェーンのようなニッチな技術領域のものであったり、
Vue.jsやKotlin、XamarinやGCPなど言語やクラウドを学んで何かアプリを作成してくるなど人によって様々です。

では、実際に勉強会をレポートしていきましょう！
12月6日の勉強会　テーマ「フロントエンドにおけるIaCとCI」 
  2017年12月6日の勉強会-1   
これは12月6日に行われた勉強会の写真です。

今回の発表者は外部のフロントエンド関連の勉強会で多く発表されている山本さん。

今回のお話は「フロントエンドにおけるIaCとCI」についてでした

IaC (Infrastructure as Code) ということで、
 なぜITインフラの構成をコード化すべきなのか IaCの実際の使用方法
  など基本的なところから、
 IoCで作成したテンプレートのプロビジョニングの自動化(CI)について
 利用するCIツールのそれぞれの区分けや比較
 実際に行ったCUIでのCIツールでの管理の具体的な構成や手順
  などをお話頂きました。

  2017年12月6日の勉強会-2   
発表の詳しい内容はこちらをご覧ください！！↓↓↓

フロントエンドのIaCとCIとLoC

OpenAPIでAPI GatewayのモックAPIを作り、コード不要のAPIテストツールDreddでテスト

インフラ基盤のコード化、ビルドやテストの自動化は
開発の効率化・省力化にもつながりますし、
コード管理できればメンテナンスが属人化されることも防げます。

いいことずくめですね。

ぜひIoCとCIで安全・スマート・モテル駆動開発を！</description>
    </item>
    
  </channel>
</rss>