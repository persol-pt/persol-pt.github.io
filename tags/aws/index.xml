<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/tags/aws/</link>
    <description>Recent content in Aws on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 17 Dec 2017 17:51:27 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS X-Rayを使ってLambda内の処理をトレースしてみる</title>
      <link>https://persol-pt.github.io/posts/using-lambda-with-aws-xray/</link>
      <pubDate>Sun, 17 Dec 2017 17:51:27 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/using-lambda-with-aws-xray/</guid>
      <description>どもどもビトルです。 今回は AWS Lambda Advent Calendar 2017の１７日目の記事を書きます。
僕は今年の Serverlessconf Tokyoに行ってきたのですが、その時にちょくちょくAWSのX-Rayというサービスを耳にして気になったので、それについて書きます。

AWS X-Rayとは？ まず以下の特徴があります：
 リクエストのトレース 例外の収集 プロファイリング機能 分散型アプリケーションの動作分析の支援  概要としては、開発者が作ったアプリケーション内のリクエストに関するデータを収集し、 それらを可視化・フィルタリングできるようにしてアプリケーション内のボトルネックの発見などを手助けします。 また、収集したリクエストのデータを元にリクエストとレスポンスだけでなく、アプリ内でコールされたDBやWeb APIなどのAWS内のリソース・サービスに関する情報も収集することができます。

実際に使ってみた ではさっそく試して見ましょうか。
今回もちゃちゃっとServerless Frameworkを使ってデプロイします。まずプロジェクトを作成しましょう。
sls create -t aws-nodejs-ecma-script -p aws-xray cd aws-xray  そして serverless.yml を以下のように編集します。
service: name: aws-xray plugins: - serverless-webpack - serverless-plugin-tracing # トレース有効用のプラグイン provider: name: aws runtime: nodejs6.10 stage: dev region: ap-northeast-1 tracing: true # X-Rayでのトレースを有効にする iamRoleStatements: - Effect: Allow Action: - dynamodb:GetItem - dynamodb:PutItem - xray:PutTraceSegments #X-Ray周りの権限も忘れずに - xray:PutTelemetryRecords #X-Ray周りの権限も忘れずに Resource: &amp;quot;*&amp;quot; custom: region: ${self:provider.</description>
    </item>
    
    <item>
      <title>おじさんLINEごっこBOTを作ってみた</title>
      <link>https://persol-pt.github.io/posts/line-ojisan-bot/</link>
      <pubDate>Fri, 15 Dec 2017 16:10:08 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/line-ojisan-bot/</guid>
      <description>かなり遅れてしまいましたが、今回はボット (Bot) Advent Calendar 2017の10日目の記事を書きます。

突然ですが、みなさん「 おじさんLINEごっこ 」という遊びをご存知ですか？ 最近若い女子同士で流行っているこの遊びですが、今時のSNSにありそうな「おじさんの文章」を真似しながら送り合うというものです。
まず特徴としては以下が挙げられます：
 長い 句読点が多い 無駄に褒めたがる 名前は基本的にちゃん(チャン)付け ちょくちょく自分語りを挟んでくる 隠しきれない下心  
結構エグい感じがしますね。
ではこの情報を元にそれに近いLINEおじさんBOTを作ってみようと思います。
用意するものはこちらです：
 LINE Developersアカウント Dialogflowアカウント  構成はシンプルにこんな感じにしています。
 LINEおじさんBOT構成図   
↑の流れをざっくり説明すると：

①LINEおじさんアカウントに投げたメッセージを

②Lambdaで受け取って

③そのメッセージをdialogflowに投げて

④dialogflowから返ってきた返答を

⑤そのままLINEに返す

Lambdaで実装したいので、serverless frameworkでデプロイをちゃちゃっとできるようにしておきました。
まずは構成定義用のyaml。
# serverless.yml service: name: line-ojisan provider: name: aws runtime: nodejs6.10 stage: dev region: ap-northeast-1 custom: region: ${self:provider.region} prefix: ${self:service}-${self:provider.stage} config: ${self:custom.</description>
    </item>
    
    <item>
      <title>Cloud-based WAF(Web Application Firewall) 比較</title>
      <link>https://persol-pt.github.io/posts/waf-comparison/</link>
      <pubDate>Wed, 06 Dec 2017 01:32:59 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/waf-comparison/</guid>
      <description>Security Advent Calendar 2017 6 日目の記事です。

WAF とは XSS や SQL インジェクションなどの HTTP 攻撃を防ぐための Firewall で、
Cloud-based WAF では、リクエストが WAF を通るよう WAF サービスに DNS を向け、安全なリクエストのみオリジンへ通す、という方式をとります。
私は WAF には疎くて、AWS WAF くらいしか知らなかったので、WAF ってのは自分で設定するものなんだろうなぁと思っていたんですが、調べてみたらマネージド WAF サービスって色々あるんですね。

サービス比較するにあたり、海外の WAF 紹介記事調べたり、ガートナーの WAF 市場の図を参考にしました。

 Gartner Magic Quadrant for Web Application Firewalls 2016   
 Gartner Magic Quadrant for Web Application Firewalls 2017   
ということで、市場リーダーの Imperva のIncapsulaと Akamai のクラウド・セキュリティ・ソリューションと F5 Networks のSilverline、そして海外の WAF 紹介記事でよく見かけるCloudflareとSucuri、国産のScutum、AWS を比較してみました。</description>
    </item>
    
  </channel>
</rss>