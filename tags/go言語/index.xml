<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go言語 on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/tags/go%E8%A8%80%E8%AA%9E/</link>
    <description>Recent content in Go言語 on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 27 Aug 2018 14:19:06 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/tags/go%E8%A8%80%E8%AA%9E/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>勉強会[Golang入門]</title>
      <link>https://persol-pt.github.io/posts/tech-workshop_introduction_to_golang/</link>
      <pubDate>Mon, 27 Aug 2018 14:19:06 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/tech-workshop_introduction_to_golang/</guid>
      <description>皆さんこんにちは。
パーソルプロセス&amp;amp;テクノロジーのyoshi-satoです。
今週もテクテク部の勉強会の様子をお送りいたします。
※技術的なブログについてはQiitaでメンバーが各々に書き進めています。
ぜひこちらもご覧ください。
Qiita - パーソルプロセス&amp;amp;テクノロジー
今週の発表者は、テクテク部のビトルさんで、発表テーマは「Golang入門」でした。

 
Golang入門  ディレクトリ構成について Golangでは、開発者がコードを1つにまとめたものをworkspaceと呼びます。
 workspaceは、bin, pkg, srcの3つのディレクトリで構成されています。
binには実行可能なコマンドのバイナリファイルが配置され、
pkgには、インストールされたパッケージが配置されます。
srcは各ソースファイルやリポジトリを配置するディレクトリで、リポジトリが異なる場合はディレクトリを分けます。
Goのツールはパッケージとソースをビルドし、完成したバイナリをpkgとbinそれぞれにインストールします。

GOPATHについて GOPATHとは、自分のworkspaceのパスを指定するための環境変数です。
デフォルトでは、Unix系OSであれば$HOME\goになっており、Windowsであれば%USERPROFILE%\goになります。
デフォルトで指定されているパス以外の場所で作業を行いたい場合、GOPATHを変更する必要があります。
 
文法について Golangの基本的な文法をご紹介いただきました。
文法についてビトルさん自身は、Goのチュートリアルである A Tour of Go を参考にされたそうです。

パッケージ 外部のコードを使用したい場合、他の言語と同じように、import文でインポートします。
パッケージ名は&amp;rdquo;&amp;ldquo;で囲みますが、複数のパッケージを同時にインポートしたい場合、さらに丸括弧で囲みグループであることを示します。
標準パッケージでないものは、ビルド時にインストールされます。
 
関数 Golangで関数を定義する際は、Java等と同じように引数と返り値の両方の型を宣言します。
また、返り値を宣言する際、複数の返り値を宣言しておくことで、2つ以上の値をreturnすることができます。
さらに、返り値の変数名を定義することも可能で、関数内で変数として利用することもできます。
関数内でreturnに値を渡していなければ、変数名を定義した返り値が自動的に返されます。
 
変数・定数 変数を宣言する際は、varを使います。
変数の定義時に変数の型を宣言する必要がありますが、定義と同時に初期値を代入していれば、
初期値から自動的に型が判断されます。
関数の中ではvarの省略形として:=を使うこともできますが、関数の外ではvar, func等のキーワードで始まる宣言しか
利用できません。
定数は、constで宣言します。定数宣言の省略形はありません。
 
型 変数、定数を宣言する際に初期値を代入せずに、型宣言のみを行った場合、型によってそれぞれの初期値が
自動的に代入されます。
初期値は、
・int,float等の数字型の場合は0
・bool型の場合はfalse</description>
    </item>
    
  </channel>
</rss>