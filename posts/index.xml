<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PPT Developers&#39; Blog</title>
    <link>https://persol-pt.github.io/posts/</link>
    <description>Recent content in Posts on PPT Developers&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 18 Dec 2017 00:56:09 +0900</lastBuildDate>
    
	<atom:link href="https://persol-pt.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TerraformでAmazon ECS上にGitLabを構築</title>
      <link>https://persol-pt.github.io/posts/gitlab-ecs/</link>
      <pubDate>Mon, 18 Dec 2017 00:56:09 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/gitlab-ecs/</guid>
      <description>GitLab Advent Calendar 2017 17 日目の記事です。

私のプロジェクトではプロジェクト管理に GitLab を使っていて、元々シングルインスタンスに docker-compose で構築していて、こんな記事も書いたのですが、コンテナクラスターを一度触ってみたかったので、勉強がてら ECS 上に GitLab 構築してみました。

その結果の構成コードがこちらのリポジトリになりますので、同じことをやりたい方の参考になればと思います。

最初に結論 GitLab だけしか立てないなら ECS 上に構築するのはイマイチ旨味がありません。
もし HA を求めるなら、公式がHigh Availability on AWS - GitLab Documentationというページを用意していますので、これに従った方がいいと思います。

主に負荷の増減が大きいのは GitLab Runner の方なんですが、仕様上 ECS で管理できなかったので、スケーリングする機会がなく、また思ってた以上に ECS 構築が超絶面倒臭くて、Fat Terraform になってしまい、ただただ手間のかかった docker-compose みたいなものになっています。

先日 ECS インスタンスをフルマネージドしてくれる新サービスAWS Fargateが発表されましたので、インスタンス周りの設定を大幅に削れそうなら ECS でもいいかもしれません。

あと、Gitlab Meetup Tokyo #2 でこちらのAnsible で作る、AWS で「器の大きい」Omnibus-GitLab // Speaker Deckという LT を拝聴して、「俺も 8,390,000TB にしたい！」という衝動にかられ、バージニアの EFS に構築したせいか普通に立てた時よりあきらかにもっさりしています。。</description>
    </item>
    
    <item>
      <title>AWS X-Rayを使ってLambda内の処理をトレースしてみる</title>
      <link>https://persol-pt.github.io/posts/using-lambda-with-aws-xray/</link>
      <pubDate>Sun, 17 Dec 2017 17:51:27 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/using-lambda-with-aws-xray/</guid>
      <description>どもどもビトルです。 今回は AWS Lambda Advent Calendar 2017の１７日目の記事を書きます。
僕は今年の Serverlessconf Tokyoに行ってきたのですが、その時にちょくちょくAWSのX-Rayというサービスを耳にして気になったので、それについて書きます。

AWS X-Rayとは？ まず以下の特徴があります：
 リクエストのトレース 例外の収集 プロファイリング機能 分散型アプリケーションの動作分析の支援  概要としては、開発者が作ったアプリケーション内のリクエストに関するデータを収集し、 それらを可視化・フィルタリングできるようにしてアプリケーション内のボトルネックの発見などを手助けします。 また、収集したリクエストのデータを元にリクエストとレスポンスだけでなく、アプリ内でコールされたDBやWeb APIなどのAWS内のリソース・サービスに関する情報も収集することができます。

実際に使ってみた ではさっそく試して見ましょうか。
今回もちゃちゃっとServerless Frameworkを使ってデプロイします。まずプロジェクトを作成しましょう。
sls create -t aws-nodejs-ecma-script -p aws-xray cd aws-xray  そして serverless.yml を以下のように編集します。
service: name: aws-xray plugins: - serverless-webpack - serverless-plugin-tracing # トレース有効用のプラグイン provider: name: aws runtime: nodejs6.10 stage: dev region: ap-northeast-1 tracing: true # X-Rayでのトレースを有効にする iamRoleStatements: - Effect: Allow Action: - dynamodb:GetItem - dynamodb:PutItem - xray:PutTraceSegments #X-Ray周りの権限も忘れずに - xray:PutTelemetryRecords #X-Ray周りの権限も忘れずに Resource: &amp;quot;*&amp;quot; custom: region: ${self:provider.</description>
    </item>
    
    <item>
      <title>DockerだけでRails、特にWebpackerはハマった</title>
      <link>https://persol-pt.github.io/posts/webpacker-docker/</link>
      <pubDate>Sat, 16 Dec 2017 16:50:12 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/webpacker-docker/</guid>
      <description>すいません遅くなりました。。
Ruby on Rails Advent Calendar 2017 14 日目の記事です。

ある日、

「docker run で rails new とか bundle install したい」 
と、知り合いのそこそこ可愛い女の子が言ってきました。

同僚の作ったおじさん LINE ボットの教師データになるほどのオジサンである私は、
誠意（下心）を持って取り組んだのであります。
しかし、やってみたら色々ハマったので共有します。

ちなみに最終的な状態はこちらのリポジトリにありますので、ここからの長々とした過程を飛ばしたい方はこちらをご覧ください。

Rails の Docker イメージを作る 一般的に Rails アプリケーションと Docker を組み合わせる場合、Quickstart: Compose and Railsにあるように、「Rails アプリケーションを起動する Docker イメージを作る」という使い方が主流のようです。

docker runで rails コマンドを使用したいのであれば、Rails とその依存するものがインストールされた Docker イメージが必要ですが、
Rails 公式 Docker イメージは非推奨でもうメンテされていないので、
最初はこの Dockerfile を参考にして作りました。

FROM ruby RUN apt-get update &amp;amp;&amp;amp; apt-get install -y nodejs --no-install-recommends &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* RUN apt-get update &amp;amp;&amp;amp; apt-get install -y mysql-client postgresql-client sqlite3 --no-install-recommends &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* RUN gem install rails  しかしこれで作ったイメージでbundle install --path vendor/bundleしても.</description>
    </item>
    
    <item>
      <title>GCP Meets Kotlin</title>
      <link>https://persol-pt.github.io/posts/gcp-meets-kotlin/</link>
      <pubDate>Fri, 15 Dec 2017 17:16:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/gcp-meets-kotlin/</guid>
      <description>この記事は Google Cloud Platform Advent Calendar 2017 の15日目の記事です。 
はじめに 今年盛り上がったプログラミング言語の一つがKotlinであるというのは衆目の一致するところだと思います。 Google I/OでAndoridアプリ開発の公式言語としてサポートされることが発表されたのを始め、様々なニュースが話題になっていました。  Kotlinの特徴を簡単にいうと、
 JVM上で動作するプログラミング言語 Javaとの100%互換 Null安全、型安全  となります。  最近ではサーバサイドのプログラミング言語としても注目され採用事例も増えて来ています(弊社でも採用を検討しています)  特徴であげた「Javaとの100%互換」があるため、Javaを使うGoogle Cloud Platformの各種サービスでもKotlinで実装することが出来ます。 その実装例を書いていきたいと思います。 
Google App Engine [Standard enviroment] コード   GAE StandardはGoogleが用意した専用コンテナで動作します。使用できる言語が限られていたり制約は多いのですが、その分開発や運用が楽です。 どのフレームワークでも多分問題なく動作するとは思いますが、今回はSprinngBoot(2.0.0.M7)で作りました。 
プログラムソース  メインクラス  warで実行するためにSpringBootServletInitializerクラスを継承し、configureメソッドをオーバーライドします。
@SpringBootApplication class Application : SpringBootServletInitializer() { @Bean fun cloudDatastoreService(): DatastoreService{ return DatastoreServiceFactory.getDatastoreService() } override fun configure(builder: SpringApplicationBuilder): SpringApplicationBuilder { return builder.sources(Application::class.java) } } fun main(args: Array&amp;lt;String&amp;gt;) { runApplication&amp;lt;Application&amp;gt;(*args) }   Datastoreへのアクセス  Datastoreに接続するには「Google Cloud Java Client」かappengine API」があります。 Standardの場合は「Google Cloud Java Client」を利用するとローカル環境で実行した際に</description>
    </item>
    
    <item>
      <title>おじさんLINEごっこBOTを作ってみた</title>
      <link>https://persol-pt.github.io/posts/line-ojisan-bot/</link>
      <pubDate>Fri, 15 Dec 2017 16:10:08 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/line-ojisan-bot/</guid>
      <description>かなり遅れてしまいましたが、今回はボット (Bot) Advent Calendar 2017の10日目の記事を書きます。

突然ですが、みなさん「 おじさんLINEごっこ 」という遊びをご存知ですか？ 最近若い女子同士で流行っているこの遊びですが、今時のSNSにありそうな「おじさんの文章」を真似しながら送り合うというものです。
まず特徴としては以下が挙げられます：
 長い 句読点が多い 無駄に褒めたがる 名前は基本的にちゃん(チャン)付け ちょくちょく自分語りを挟んでくる 隠しきれない下心  
結構エグい感じがしますね。
ではこの情報を元にそれに近いLINEおじさんBOTを作ってみようと思います。
用意するものはこちらです：
 LINE Developersアカウント Dialogflowアカウント  構成はシンプルにこんな感じにしています。
 LINEおじさんBOT構成図   
↑の流れをざっくり説明すると：

①LINEおじさんアカウントに投げたメッセージを

②Lambdaで受け取って

③そのメッセージをdialogflowに投げて

④dialogflowから返ってきた返答を

⑤そのままLINEに返す

Lambdaで実装したいので、serverless frameworkでデプロイをちゃちゃっとできるようにしておきました。
まずは構成定義用のyaml。
# serverless.yml service: name: line-ojisan provider: name: aws runtime: nodejs6.10 stage: dev region: ap-northeast-1 custom: region: ${self:provider.region} prefix: ${self:service}-${self:provider.stage} config: ${self:custom.</description>
    </item>
    
    <item>
      <title>[初心者向け]GoogleAnalytics を始める時に知っておいたほうが良いこと</title>
      <link>https://persol-pt.github.io/posts/starting-google-analytics/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/starting-google-analytics/</guid>
      <description>この記事について Google Analytics Advent Calendar 2017 16日目の記事です。 はじめに Google AnalyticsをサイトやWEBサービスで利用するにあたり、予め知っておいたほうが良いと思われる 心構えや、よく使われる内容について、軽く触れておきます。 GAを使う前の心構え 1．gaで計測される割合に関する数値は、統計上支障がない程度に間引かれている  最近は多くのレポートが実数に基づいて作成されているようですが、一部のレポートでは
このレポートは10万セッション数 （セッション数の 0.893%） に基づいています。  のような表示があります。 PVなどカウントを行うようなレポートは正確なカウントがされていますが、割合を表示するレポートの場合は、 一定のサンプル数で概算として出していることを予め認識し、事業側の方にも認識をしてもらいましょう。 2．一つのgaタグで計測できるのは、原則として一つのドメイン内です デフォルトの使い方ですと、同一ドメイン内でしか計測できませんが、複数のドメインにまたがった行動の集計を取りたい場合は、クロスドメイントラッキングの設定が必要となります。
B2Bでサービス提供している場合などで、顧客のサイトから提供しているサービスのサイトに画面がリンクしている等の場合は、クロスドメイントラッキングの設定が必要となってくると思います。 3．アクセスカウントの除外設定 開発者など自分たちのアクセスは、remote hostでのアクセスフィルタを利用して、カウントから除外するようにしたほうが良いです。
公開直後は実は開発関係者が多く閲覧していたりして、PVなどに変に影響してしまう可能性があります。
4．ga以外のアクセス解析用タグを利用したい場合 ga以外にも様々なマーケティング用タグがあるので、それらも一緒に埋め込みたい場合は、google tag manager を利用すると良い 5．顧客へサイトの現状分析を行うために 直帰率、離脱率の違いを正しく認識し、顧客にも共通認識を持ってもらいましょう 直帰率  セッション的に最初に訪れたページでそのままセッション切れになった場合の、割合 そのページを最初に見たタイミングのpv数に対して、そのぺーじだけ見てどこにも行かなかった割合 そのサイトのトップページ、ランディングページに対して使用すると良いと思います  離脱率  複数のページを遷移して最後に見ていたページの割合 そのページの全pvから、そのページで離脱した数 何を持って離脱を判断してるの？  セッション管理されていて、デフォルトはページを見始めてから30分でセッションタイムアウトとなる  ランディングページから、コンバージョンページすべてのページで利用されます。 どのような画面遷移になるかによって、離脱されたくないページをベンチマークしておきましょう。  PV(PageView)数  純粋なページの閲覧回数  セッション数  gaが定めているセッション単位での延べ接続数  1セッション 30分以内にページ遷移し続けている1クライアントの接続のこと セッションの時間は変更することも可能   
以上、これからGoogleAnalytics使おうと思っている方、ちょうど使い始めた方は 上記のことを意識しておくと事業側とも大きな認識の齟齬が起きにくくなるかと思います。</description>
    </item>
    
    <item>
      <title>Back_to_swift</title>
      <link>https://persol-pt.github.io/posts/back_to_swift/</link>
      <pubDate>Mon, 11 Dec 2017 15:43:02 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/back_to_swift/</guid>
      <description> 出戻り Swift 
先日、昔（個人事業主をしてた時に）作ったiOSアプリがストアから消えてるんですけど
というような連絡を受けました。
何年も前に作りぱなしにしてたので、iOS11リリース頃に消されています。
最近iOSアプリ開発をしていなかったので、この機会にSwiftでアプリを作ってみます。
とりあえず、遊びで作った15パズルをSwiftで作り直します。
昔の素材を引っ張り出すのが面倒なので、１からつくります。
1.素材の準備 
1〜15の数字が書かれた正方形の画像をサイズ違いで３枚毎。（270x270 / 180x180 / 90x90）
2.Swiftの書き方を復習 
Swift初心者なので、とりあえずオプショナル型の使い方をググる
どこよりも分かりやすいSwiftの&amp;rdquo;?&amp;ldquo;と&amp;rdquo;!&amp;rdquo;
ここがわかり易かったです。
var / letの違い
メソッドの書き方
このくらいを調べる
3.Xcodeでプロジェクト作成 
Xcodeを開いてアプリ開発開始　XcodeからSingle View Appのプロジェクトで新規作成
ストーリーボードを開いて、360x360のビューを配置
その上に90x90のボタンを左上から15個並べる。(右下が1個分空く)
作った素材（1〜15の画像）をプロジェクトに登録
ボタンに画像を設定
ボタンに画像を指定してもうまく読み込まれない？実機で動かすと画像が表示されない。
Assetsに画像を登録してやるとうまく言ったので、それでよしとする。
ボタンの動きを作成（押された時に空きスペースが上下左右にあれば移動）
移動が終わったら全てのボタンが正しく並んでいるか判断。並んでいれば終了
シャッフルボタンを作成して、並びをぐちゃぐちゃにする動きを追加
タイマーを追加してシャッフルボタンが押されてから並びが正しくなるまで
タイマー表示する機能を追加
終わったらComplete画面を表示。ベストタイムを保持。
だいたいこんな感じで動くものができました。 4.Swiftで作ってとまどったところ 
オプショナル型のところ
Viewアニメーションの書き方
UIColorとか指定方法が変わった箇所
5.アプリの申請 
アプリの申請手順をかなり忘れていて、少し手こずりました。
それはまた別の機会に。 </description>
    </item>
    
    <item>
      <title>react-sketchappを使った開発ワークフロー</title>
      <link>https://persol-pt.github.io/posts/react-sketchapp/</link>
      <pubDate>Sun, 10 Dec 2017 23:10:32 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/react-sketchapp/</guid>
      <description>React #1 Advent Calendar 2017 10 日目の記事です。

react-sketchapp react-sketchappとは、デザインツールの Sketch 用にビルドできる React コンポーネントです。
README からの引用ですが、こんな概要です。
 デザインシステムの管理 - react-sketchapp は、Airbnb’s design system用に作られました。大規模なデザインシステムで Sketch のアセットを管理する最も簡単な方法です。 デザインに実際のコンポーネントを使用 - コードで React コンポーネントとして実装し、Sketch に描画します。 実際のデータを使用したデザイン - データを使用したデザインは重要ですが困難です。 react-sketchapp は Sketch ファイルに実際のデータを取得して埋め込むのを簡単にします。 Sketch 上に新しいツールを作る - Sketch をカスタムデザインツールのキャンバスとして使用する最も簡単な方法  実際に使用した画面の雰囲気はPainting with Codeをご覧ください。

react-sketchapp を導入するメリット 一般的にプロダクトの開発ワークフローは、例えばデザイナーからデザインファイルを受け取り、プログラマーがシステムに組み込む、という感じになりますが、そこで react-sketchapp を使ってデザイナー側で React コンポーネントを実装してもらえると、プログラマーは HOC などを利用してロジックを被せるように作っていけば、デザイナーにデザインの修正や改善を直接プロダクトコードに反映してもらえるようになって、手間やミスを削減できます。

デザイナーからすると React コンポーネントを作るというとハードルが高そうに聞こえるかもしれませんが、ステートレスコンポーネントなら HTML に結構似ているので、マークアップできる方であれば学習コストはそれほどない（と思っています）。

はじめてみる はじめるにあたり以下の環境が必要です。
 node.js 4+ ( 筆者は 8.</description>
    </item>
    
    <item>
      <title>Node.jsでHTTP/2を動かしてみる</title>
      <link>https://persol-pt.github.io/posts/using-http2-with-nodejs/</link>
      <pubDate>Sat, 09 Dec 2017 04:22:57 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/using-http2-with-nodejs/</guid>
      <description>どうも、ビトルです。
今回はNode.js Advent Calendar 2017の9日目の記事になります。

この記事ではNode.jsで現在コア機能に実験的に導入されているHTTP/2について書きたいと思います。

Serverside 
単純なHTTPサーバとしての処理はこんな感じに実装できます。

const http2 = require(&#39;http2&#39;); const fs = require(&#39;fs&#39;); const server = http2.createSecureServer({ key: fs.readFileSync(&#39;localhost-privkey.pem&#39;), cert: fs.readFileSync(&#39;localhost-cert.pem&#39;) }); server.on(&#39;error&#39;, (err) =&amp;gt; console.error(err)); server.on(&#39;socketError&#39;, (err) =&amp;gt; console.error(err)); server.on(&#39;stream&#39;, (stream, headers) =&amp;gt; { stream.respond({ &#39;content-type&#39;: &#39;text/html&#39;, &#39;:status&#39;: 200 }); stream.end(&#39;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&#39;); }); server.listen(8080);  ChromeやFirefoxなどのブラウザはHTTP/2を利用する際はSSLが必須となっているので、証明書を用意する必要があります。 証明書は自己証明書でも作成できます。

openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj &#39;/CN=localhost&#39; \ -keyout localhost-privkey.pem -out localhost-cert.</description>
    </item>
    
    <item>
      <title>Cloud-based WAF(Web Application Firewall) 比較</title>
      <link>https://persol-pt.github.io/posts/waf-comparison/</link>
      <pubDate>Wed, 06 Dec 2017 01:32:59 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/waf-comparison/</guid>
      <description>Security Advent Calendar 2017 6 日目の記事です。

WAF とは XSS や SQL インジェクションなどの HTTP 攻撃を防ぐための Firewall で、
Cloud-based WAF では、リクエストが WAF を通るよう WAF サービスに DNS を向け、安全なリクエストのみオリジンへ通す、という方式をとります。
私は WAF には疎くて、AWS WAF くらいしか知らなかったので、WAF ってのは自分で設定するものなんだろうなぁと思っていたんですが、調べてみたらマネージド WAF サービスって色々あるんですね。

サービス比較するにあたり、海外の WAF 紹介記事調べたり、ガートナーの WAF 市場の図を参考にしました。

 Gartner Magic Quadrant for Web Application Firewalls 2016   
 Gartner Magic Quadrant for Web Application Firewalls 2017   
ということで、市場リーダーの Imperva のIncapsulaと Akamai のクラウド・セキュリティ・ソリューションと F5 Networks のSilverline、そして海外の WAF 紹介記事でよく見かけるCloudflareとSucuri、国産のScutum、AWS を比較してみました。</description>
    </item>
    
    <item>
      <title>静的ファイルWebホスティングならS3よりFirebase Hosting</title>
      <link>https://persol-pt.github.io/posts/firebase-hosting/</link>
      <pubDate>Sun, 03 Dec 2017 03:13:06 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/firebase-hosting/</guid>
      <description>Firebase Advent Calendar 2017 3 日目の記事です。

Firebase Hostingはストレージ、Web ホスティング、CDN 、マネージド SSL を組み込んだサービスです。 AWS ではストレージと Web ホスティングは S3 だけでできますが、CDN は CloudFront、マネージド SSL は Certificate Manager と、複数のサービスを組み合わせ、設定しないといけません。 CDN 性能も、Firebase Hosting で使用されている Google Cloud CDN は CloudFront よりパフォーマンスがいいようです。 比較表 
    Firebase Hosting AWS     構築 1 コマンド S3 を作成。HTTPS や CDN を使うなら CloudFront を作成して S3 と結合   デプロイ 1 コマンド 1 コマンド   SSL 証明書 自動で作成＆更新＆適用 ACM で作成して CloudFront に適用。自動更新   キャッシュ ブラウザキャッシュ設定のみ CDN キャッシュ設定含め柔軟に設定可   アクセス制限 無し WAF を作成して CloudFront に適用   料金（ストア） $0.</description>
    </item>
    
    <item>
      <title>社外発信はじめました</title>
      <link>https://persol-pt.github.io/posts/start-publishing/</link>
      <pubDate>Sun, 12 Nov 2017 16:13:55 +0900</pubDate>
      
      <guid>https://persol-pt.github.io/posts/start-publishing/</guid>
      <description>&lt;p&gt;はじめまして、パーソルプロセス＆テクノロジー株式会社です。みんな PPT と略してます。レガシーなパワポですね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>